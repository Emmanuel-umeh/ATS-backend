{"version":3,"sources":["../../../src/modules/job/mutation.js"],"names":["jobCreate","params","projectId","role","description","auth","rules","data","value","check","message","common","error","invalidData","Error","Job","create","organizationId","user","userId","_id","job","Activity","jobId","action","activity","types","name","server","jobUpdate","id","updateOne","$set","jobRemove","parentValue","remove"],"mappings":"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","sourcesContent":["// App Imports\r\nimport params from '../../setup/config/params'\r\nimport { authCheck } from '../../setup/helpers/utils'\r\nimport validate from '../../setup/helpers/validation'\r\nimport Activity from '../activity/model'\r\nimport Job from './model'\r\n\r\n// Create\r\nexport async function jobCreate({ params: { projectId, role, description = '' }, auth }) {\r\n  if(authCheck(auth)) {\r\n    // Validation rules\r\n    const rules = [\r\n      {\r\n        data: { value: projectId },\r\n        check: 'notEmpty',\r\n        message: params.common.message.error.invalidData\r\n      },\r\n      {\r\n        data: { value: role },\r\n        check: 'notEmpty',\r\n        message: 'Please enter a valid role.'\r\n      }\r\n    ]\r\n\r\n    // Validate\r\n    try {\r\n      validate(rules)\r\n    } catch(error) {\r\n      throw new Error(error.message)\r\n    }\r\n\r\n    try {\r\n      const job = await Job.create({\r\n        organizationId: auth.user.organizationId,\r\n        projectId,\r\n        userId: auth.user._id,\r\n        role,\r\n        description\r\n      })\r\n\r\n      if(job) {\r\n        // Log activity\r\n        await Activity.create({\r\n          organizationId: auth.user.organizationId,\r\n          userId: auth.user._id,\r\n          projectId,\r\n          jobId: job._id,\r\n          action: params.activity.types.create,\r\n          message: `${ auth.user.name } added a new job ${ role }.`\r\n        })\r\n      }\r\n\r\n      return {\r\n        data: job\r\n      }\r\n    } catch(error) {\r\n      throw new Error(params.common.message.error.server)\r\n    }\r\n  }\r\n\r\n  throw new Error(params.user.message.error.auth)\r\n}\r\n\r\n// Update\r\nexport async function jobUpdate({ params: { id, projectId, role, description = '' }, auth }) {\r\n  if(authCheck(auth)) {\r\n    // Validation rules\r\n    const rules = [\r\n      {\r\n        data: { value: id },\r\n        check: 'notEmpty',\r\n        message: params.common.message.error.invalidData\r\n      },\r\n      {\r\n        data: { value: role },\r\n        check: 'notEmpty',\r\n        message: 'Please enter a valid role.'\r\n      }\r\n    ]\r\n\r\n    // Validate\r\n    try {\r\n      validate(rules)\r\n    } catch(error) {\r\n      throw new Error(error.message)\r\n    }\r\n\r\n    try {\r\n      const data = await Job.updateOne(\r\n        { _id: id },\r\n        {\r\n          $set: {\r\n            projectId,\r\n            role,\r\n            description\r\n          }\r\n        }\r\n      )\r\n\r\n      return {\r\n        data\r\n      }\r\n    } catch(error) {\r\n      throw new Error(params.common.message.error.server)\r\n    }\r\n  }\r\n\r\n  throw new Error(params.user.message.error.auth)\r\n}\r\n\r\n// Delete\r\nexport async function jobRemove(parentValue, { id }, { auth }) {\r\n  if(authCheck(auth)) {\r\n    // Validation rules\r\n    const rules = [\r\n      {\r\n        data: { value: id },\r\n        check: 'notEmpty',\r\n        message: params.common.message.error.invalidData\r\n      }\r\n    ]\r\n\r\n    // Validate\r\n    try {\r\n      validate(rules)\r\n    } catch(error) {\r\n      throw new Error(error.message)\r\n    }\r\n\r\n    try {\r\n      const data = await Job.remove({\r\n        _id: _id,\r\n        userId: auth.user._id\r\n      })\r\n\r\n      return {\r\n        data\r\n      }\r\n    } catch(error) {\r\n      throw new Error(params.common.message.error.server)\r\n    }\r\n  }\r\n\r\n  throw new Error(params.user.message.error.auth)\r\n}\r\n"],"file":"mutation.js"}