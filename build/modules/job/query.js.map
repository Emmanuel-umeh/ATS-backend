{"version":3,"sources":["../../../src/modules/job/query.js"],"names":["job","id","params","fields","project","auth","rules","data","value","check","message","common","error","invalidData","Error","Job","findOne","_id","select","populate","path","server","user","jobsByProject","projectId","find","organizationId"],"mappings":"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","sourcesContent":["// App Imports\r\nimport params from '../../setup/config/params'\r\nimport { authCheck } from '../../setup/helpers/utils'\r\nimport validate from '../../setup/helpers/validation'\r\nimport Job from './model'\r\n\r\n// Get by ID\r\nexport async function job({ params: { id }, fields = { job: [], project: [] } }) {\r\n  if(authCheck(auth)) {\r\n    // Validation rules\r\n    const rules = [\r\n      {\r\n        data: { value: id },\r\n        check: 'notEmpty',\r\n        message: params.common.message.error.invalidData\r\n      }\r\n    ]\r\n\r\n    // Validate\r\n    try {\r\n      validate(rules)\r\n    } catch(error) {\r\n      throw new Error(error.message)\r\n    }\r\n\r\n    try {\r\n      const data = await Job\r\n        .findOne({ _id: id })\r\n        .select(fields.job)\r\n        .populate({ path: 'projectId', select: fields.project })\r\n\r\n      return {\r\n        data\r\n      }\r\n    } catch(error) {\r\n      throw new Error(params.common.message.error.server)\r\n    }\r\n  }\r\n\r\n  throw new Error(params.user.message.error.auth)\r\n}\r\n\r\n// Get by project\r\nexport async function jobsByProject({ params: { projectId }, fields, auth }) {\r\n  if(authCheck(auth)) {\r\n    // Validation rules\r\n    const rules = [\r\n      {\r\n        data: { value: projectId },\r\n        check: 'notEmpty',\r\n        message: params.common.message.error.invalidData\r\n      }\r\n    ]\r\n\r\n    // Validate\r\n    try {\r\n      validate(rules)\r\n    } catch(error) {\r\n      throw new Error(error.message)\r\n    }\r\n\r\n    try {\r\n      const data = await Job.find({\r\n        organizationId: auth.user.organizationId,\r\n        projectId\r\n      })\r\n        .select(fields)\r\n\r\n      return {\r\n        data\r\n      }\r\n    } catch(error) {\r\n      throw new Error(params.common.message.error.server)\r\n    }\r\n  }\r\n\r\n  throw new Error(params.user.message.error.auth)\r\n}\r\n"],"file":"query.js"}