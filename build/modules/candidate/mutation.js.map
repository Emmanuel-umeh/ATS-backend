{"version":3,"sources":["../../../src/modules/candidate/mutation.js"],"names":["candidateCreate","params","projectId","jobId","name","email","mobile","experience","resume","salaryCurrent","salaryExpected","auth","rules","data","value","check","message","common","error","invalidData","Error","item","organizationId","user","userId","_id","Candidate","create","candidate","Kanban","candidateId","status","kanban","columns","key","highlight","Activity","kanbanId","action","activity","types","server","candidateUpdate","id","updateOne","$set","candidateRemove","remove"],"mappings":"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","sourcesContent":["// Imports\r\nimport isEmpty from 'lodash/isEmpty'\r\n\r\n// App Imports\r\nimport params from '../../setup/config/params'\r\nimport { authCheck } from '../../setup/helpers/utils'\r\nimport validate from '../../setup/helpers/validation'\r\nimport Kanban from '../kanban/model'\r\nimport Activity from '../activity/model'\r\nimport Candidate from './model'\r\n\r\n// Create\r\nexport async function candidateCreate({ params: { projectId, jobId = '', name, email, mobile, experience, resume, salaryCurrent = '', salaryExpected = '' }, auth }) {\r\n  if(authCheck(auth)) {\r\n    // Validation rules\r\n    const rules = [\r\n      {\r\n        data: { value: projectId },\r\n        check: 'notEmpty',\r\n        message: params.common.message.error.invalidData\r\n      },\r\n      {\r\n        data: { value: name },\r\n        check: 'notEmpty',\r\n        message: 'Please enter a valid name.'\r\n      },\r\n      {\r\n        data: { value: email },\r\n        check: 'email',\r\n        message: 'Please enter a valid email.'\r\n      },\r\n      {\r\n        data: { value: mobile },\r\n        check: 'notEmpty',\r\n        message: 'Please enter a valid mobile number.'\r\n      },\r\n      {\r\n        data: { value: experience },\r\n        check: 'notEmpty',\r\n        message: 'Please enter a valid experience in years.'\r\n      },\r\n      {\r\n        data: { value: resume },\r\n        check: 'notEmpty',\r\n        message: 'Please upload resume.'\r\n      }\r\n    ]\r\n\r\n    // Validate\r\n    try {\r\n      validate(rules)\r\n    } catch(error) {\r\n      throw new Error(error.message)\r\n    }\r\n\r\n    try {\r\n      let item = {\r\n        organizationId: auth.user.organizationId,\r\n        projectId,\r\n        userId: auth.user._id,\r\n        name,\r\n        email,\r\n        mobile,\r\n        experience,\r\n        resume,\r\n        salaryCurrent,\r\n        salaryExpected\r\n      }\r\n      if(!isEmpty(jobId)) {\r\n        item.jobId = jobId\r\n      }\r\n\r\n      const candidate = await Candidate.create(item)\r\n\r\n      if(candidate) {\r\n        const kanban = await Kanban.create({\r\n          organizationId: auth.user.organizationId,\r\n          projectId,\r\n          candidateId: candidate._id,\r\n          userId: auth.user._id,\r\n          status: params.kanban.columns[0].key,\r\n          highlight: false\r\n        })\r\n\r\n        // Log activity\r\n        await Activity.create({\r\n          organizationId: auth.user.organizationId,\r\n          userId: auth.user._id,\r\n          projectId,\r\n          candidateId: candidate._id,\r\n          kanbanId: kanban._id,\r\n          action: params.activity.types.create,\r\n          message: `${ auth.user.name } added a new candidate ${ name } (${ email }).`\r\n        })\r\n      }\r\n\r\n      return {\r\n        data: candidate\r\n      }\r\n    } catch(error) {\r\n      throw new Error(params.common.message.error.server)\r\n    }\r\n  }\r\n\r\n  throw new Error(params.user.message.error.auth)\r\n}\r\n\r\n// Update\r\nexport async function candidateUpdate({ params: { id, projectId, jobId = '', name, email, mobile, experience, resume, salaryCurrent = '', salaryExpected = '' }, auth }) {\r\n  if(authCheck(auth) && !isEmpty(id)) {\r\n    // Validation rules\r\n    const rules = [\r\n      {\r\n        data: { value: id },\r\n        check: 'notEmpty',\r\n        message: params.common.message.error.invalidData\r\n      },\r\n      {\r\n        data: { value: projectId },\r\n        check: 'notEmpty',\r\n        message: params.common.message.error.invalidData\r\n      },\r\n      {\r\n        data: { value: name },\r\n        check: 'notEmpty',\r\n        message: 'Please enter a valid name.'\r\n      },\r\n      {\r\n        data: { value: email },\r\n        check: 'email',\r\n        message: 'Please enter a valid email.'\r\n      },\r\n      {\r\n        data: { value: mobile },\r\n        check: 'notEmpty',\r\n        message: 'Please enter a valid mobile number.'\r\n      },\r\n      {\r\n        data: { value: experience },\r\n        check: 'notEmpty',\r\n        message: 'Please enter a valid experience in years.'\r\n      },\r\n      {\r\n        data: { value: resume },\r\n        check: 'notEmpty',\r\n        message: 'Please upload resume.'\r\n      }\r\n    ]\r\n\r\n    // Validate\r\n    try {\r\n      validate(rules)\r\n    } catch(error) {\r\n      throw new Error(error.message)\r\n    }\r\n\r\n    try {\r\n      let item = {\r\n        projectId,\r\n        name,\r\n        email,\r\n        mobile,\r\n        experience,\r\n        resume,\r\n        salaryCurrent,\r\n        salaryExpected\r\n      }\r\n      if(!isEmpty(jobId)) {\r\n        item.jobId = jobId\r\n      }\r\n\r\n      const candidate = await Candidate.updateOne({ _id: id }, { $set: item })\r\n\r\n      if(candidate) {\r\n        await Kanban.updateOne(\r\n          {\r\n            organizationId: auth.user.organizationId,\r\n            candidateId: id\r\n          },\r\n          { projectId }\r\n        )\r\n      }\r\n\r\n      return {\r\n        data: candidate\r\n      }\r\n    } catch(error) {\r\n      throw new Error(params.common.message.error.server)\r\n    }\r\n  }\r\n\r\n  throw new Error(params.user.message.error.auth)\r\n}\r\n\r\n// Delete\r\nexport async function candidateRemove({ params: { id }, auth }) {\r\n  if(authCheck(auth)) {\r\n    // Validation rules\r\n    const rules = [\r\n      {\r\n        data: { value: id },\r\n        check: 'notEmpty',\r\n        message: params.common.message.error.invalidData\r\n      }\r\n    ]\r\n\r\n    // Validate\r\n    try {\r\n      validate(rules)\r\n    } catch(error) {\r\n      throw new Error(error.message)\r\n    }\r\n\r\n    try {\r\n      const data = await Candidate.remove({\r\n        _id: _id,\r\n        userId: auth.user._id\r\n      })\r\n\r\n      return {\r\n        data\r\n      }\r\n    } catch(error) {\r\n      throw new Error(params.common.message.error.server)\r\n    }\r\n  }\r\n\r\n  throw new Error(params.user.message.error.auth)\r\n}\r\n"],"file":"mutation.js"}