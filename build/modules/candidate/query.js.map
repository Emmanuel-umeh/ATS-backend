{"version":3,"sources":["../../../src/modules/candidate/query.js"],"names":["candidate","id","params","fields","project","job","rules","data","value","check","message","common","error","invalidData","Error","Candidate","findOne","_id","select","populate","path","server","candidatesByProject","projectId","auth","find","organizationId","user","candidatesByOrganization"],"mappings":"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","sourcesContent":["// App Imports\r\nimport params from '../../setup/config/params'\r\nimport { authCheck } from '../../setup/helpers/utils'\r\nimport validate from '../../setup/helpers/validation'\r\nimport Candidate from './model'\r\n\r\n// Get candidate by ID\r\nexport async function candidate({ params: { id }, fields = { candidate: [], project: [], job: [] }}) {\r\n  // Validation rules\r\n  const rules = [\r\n    {\r\n      data: { value: id },\r\n      check: 'notEmpty',\r\n      message: params.common.message.error.invalidData\r\n    }\r\n  ]\r\n\r\n  // Validate\r\n  try {\r\n    validate(rules)\r\n  } catch(error) {\r\n    throw new Error(error.message)\r\n  }\r\n\r\n  try {\r\n    const data = await Candidate.findOne({ _id: id })\r\n      .select(fields.candidate)\r\n      .populate({ path: 'projectId', select: fields.project })\r\n      .populate({ path: 'jobId', select: fields.job })\r\n\r\n    return {\r\n      data\r\n    }\r\n  } catch(error) {\r\n    throw new Error(params.common.message.error.server)\r\n  }\r\n}\r\n\r\n// Get by project\r\nexport async function candidatesByProject({ params: { projectId }, fields = { candidate: [], job: [] }, auth }) {\r\n  if(authCheck(auth)) {\r\n    // Validation rules\r\n    const rules = [\r\n      {\r\n        data: { value: projectId },\r\n        check: 'notEmpty',\r\n        message: params.common.message.error.invalidData\r\n      }\r\n    ]\r\n\r\n    // Validate\r\n    try {\r\n      validate(rules)\r\n    } catch(error) {\r\n      throw new Error(error.message)\r\n    }\r\n\r\n    try {\r\n      const data = await Candidate.find({\r\n        organizationId: auth.user.organizationId,\r\n        projectId\r\n      })\r\n        .select(fields.candidate)\r\n        .populate({ path: 'projectId', select: fields.project })\r\n        .populate({ path: 'jobId', select: fields.job })\r\n\r\n\r\n      return {\r\n        data\r\n      }\r\n    } catch(error) {\r\n      throw new Error(params.common.message.error.server)\r\n    }\r\n  }\r\n\r\n  throw new Error(params.user.message.error.auth)\r\n}\r\n\r\n// Get by organization\r\nexport async function candidatesByOrganization({ fields = { candidate: [], project: [], job: [] }, auth }) {\r\n  if(authCheck(auth)) {\r\n    try {\r\n      const data = await Candidate.find({\r\n        organizationId: auth.user.organizationId\r\n      })\r\n        .select(fields.candidate)\r\n        .populate({ path: 'projectId', select: fields.project })\r\n        .populate({ path: 'jobId', select: fields.job })\r\n\r\n      return {\r\n        data\r\n      }\r\n    } catch(error) {\r\n      throw new Error(params.common.message.error.server)\r\n    }\r\n  }\r\n\r\n  throw new Error(params.user.message.error.auth)\r\n}\r\n"],"file":"query.js"}