{"version":3,"sources":["../../../src/modules/feedback/mutation.js"],"names":["feedbackCreateOrUpdate","params","interviewId","text","status","rules","data","value","check","message","common","error","invalidData","Error","Interview","findOne","_id","populate","interview","Feedback","feedback","Kanban","updateOne","organizationId","projectId","candidateId","$set","create","Activity","userId","action","activity","types","interviewerId","name","feedbackId","to","email","from","subject","template","server"],"mappings":"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","sourcesContent":["// Imports\r\nimport React from 'react'\r\n\r\n// App Imports\r\nimport params from '../../setup/config/params'\r\nimport validate from '../../setup/helpers/validation'\r\nimport Activity from '../activity/model'\r\nimport Interview from '../interview/model'\r\nimport Kanban from '../kanban/model'\r\nimport Feedback from './model'\r\n\r\n// Email\r\nimport { send as sendEmail } from '../email/send'\r\nimport FeedbackTemplate from './email/Feedback'\r\n\r\n// Create\r\nexport async function feedbackCreateOrUpdate({ params: { interviewId, text, status } }) {\r\n  // Validation rules\r\n  const rules = [\r\n    {\r\n      data: { value: interviewId },\r\n      check: 'notEmpty',\r\n      message: params.common.message.error.invalidData\r\n    },\r\n    {\r\n      data: { value: text },\r\n      check: 'notEmpty',\r\n      message: params.common.message.error.invalidData\r\n    },\r\n    {\r\n      data: { value: status },\r\n      check: 'notEmpty',\r\n      message: params.common.message.error.invalidData\r\n    }\r\n  ]\r\n\r\n  // Validate\r\n  try {\r\n    validate(rules)\r\n  } catch(error) {\r\n    throw new Error(error.message)\r\n  }\r\n\r\n  try {\r\n    const interview = await Interview.findOne({ _id: interviewId })\r\n      .populate('candidateId')\r\n      .populate('interviewerId')\r\n      .populate('userId')\r\n\r\n    if (interview) {\r\n      let feedback = await Feedback.findOne({ interviewId })\r\n\r\n      // Update kanban status\r\n      await Kanban.updateOne(\r\n        {\r\n          organizationId: interview.organizationId,\r\n          projectId: interview.projectId,\r\n          candidateId: interview.candidateId\r\n        },\r\n        {\r\n          $set: {\r\n            status\r\n          }\r\n        }\r\n      )\r\n\r\n      // Update or create feedback\r\n      if (feedback) {\r\n        await Feedback.updateOne(\r\n          {interviewId},\r\n          {\r\n            $set: {\r\n              text,\r\n              status\r\n            }\r\n          }\r\n        )\r\n      } else {\r\n        feedback = await Feedback.create({\r\n          organizationId: interview.organizationId,\r\n          interviewId,\r\n          text,\r\n          status\r\n        })\r\n\r\n        // Log activity\r\n        await Activity.create({\r\n          organizationId: interview.organizationId,\r\n          userId: interview.userId._id,\r\n          projectId: interview.projectId,\r\n          interviewId,\r\n          action: params.activity.types.create,\r\n          message: `${ interview.interviewerId.name } submitted feedback for ${ interview.candidateId.name }.`\r\n        })\r\n      }\r\n\r\n      // Update feedback id in interview\r\n      await Interview.updateOne(\r\n        { _id: interview._id },\r\n        {\r\n          feedbackId: feedback._id\r\n        }\r\n      )\r\n\r\n      // Send email\r\n      await sendEmail({\r\n        to: {\r\n          name: interview.userId.name,\r\n          email: interview.userId.email\r\n        },\r\n        from: {\r\n          name: interview.interviewerId.name,\r\n          email: interview.interviewerId.email\r\n        },\r\n        subject: `Feedback Received for ${ interview.candidateId.name }`,\r\n        template:\r\n          <FeedbackTemplate\r\n            interview={interview}\r\n            text={text}\r\n            status={status}\r\n          />\r\n      })\r\n\r\n      return {\r\n        data: feedback\r\n      }\r\n    }\r\n  } catch(error) {\r\n    throw new Error(params.common.message.error.server)\r\n  }\r\n\r\n  throw new Error(params.common.message.error.default)\r\n}\r\n"],"file":"mutation.js"}