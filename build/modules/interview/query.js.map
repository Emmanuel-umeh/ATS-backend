{"version":3,"sources":["../../../src/modules/interview/query.js"],"names":["interview","id","params","fields","rules","data","value","check","message","common","error","invalidData","Error","Interview","findOne","_id","select","populate","path","candidate","server","interviewsByOrganization","auth","find","organizationId","user","interviewsByProject","projectId"],"mappings":"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","sourcesContent":["// App Imports\r\nimport params from '../../setup/config/params'\r\nimport { authCheck } from '../../setup/helpers/utils'\r\nimport validate from '../../setup/helpers/validation'\r\nimport Interview from './model'\r\n\r\n// Get interview by ID\r\nexport async function interview({ params: { id }, fields }) {\r\n  // Validation rules\r\n  const rules = [\r\n    {\r\n      data: { value: id },\r\n      check: 'notEmpty',\r\n      message: params.common.message.error.invalidData\r\n    }\r\n  ]\r\n\r\n  // Validate\r\n  try {\r\n    validate(rules)\r\n  } catch(error) {\r\n    throw new Error(error.message)\r\n  }\r\n\r\n  try {\r\n    const data = await Interview.findOne({ _id: id })\r\n      .select(fields.interview)\r\n      .populate({ path: 'candidateId', select: fields.candidate })\r\n\r\n    return {\r\n      data\r\n    }\r\n  } catch(error) {\r\n    throw new Error(params.common.message.error.server)\r\n  }\r\n}\r\n\r\n// Get by organization\r\nexport async function interviewsByOrganization({ fields, auth }) {\r\n  if(authCheck(auth)) {\r\n    try {\r\n      const data = await Interview.find({\r\n        organizationId: auth.user.organizationId\r\n      })\r\n        .select(fields.interview)\r\n        .populate({ path: 'candidateId', select: fields.candidate })\r\n        .populate({ path: 'interviewerId', select: fields.candidate })\r\n\r\n      return {\r\n        data\r\n      }\r\n    } catch(error) {\r\n      throw new Error(params.common.message.error.server)\r\n    }\r\n  }\r\n\r\n  throw new Error(params.user.message.error.auth)\r\n}\r\n\r\n// Get by project\r\nexport async function interviewsByProject({ params: { projectId }, fields, auth }) {\r\n  if(authCheck(auth)) {\r\n    // Validation rules\r\n    const rules = [\r\n      {\r\n        data: { value: projectId },\r\n        check: 'notEmpty',\r\n        message: params.common.message.error.invalidData\r\n      }\r\n    ]\r\n\r\n    // Validate\r\n    try {\r\n      validate(rules)\r\n    } catch(error) {\r\n      throw new Error(error.message)\r\n    }\r\n\r\n    try {\r\n      const data = await Interview.find({\r\n        organizationId: auth.user.organizationId,\r\n        projectId\r\n      })\r\n        .select(fields.interview)\r\n        .populate({ path: 'projectId', select: fields.projectId })\r\n        .populate({ path: 'candidateId', select: fields.candidate })\r\n        .populate({ path: 'interviewerId', select: fields.candidate })\r\n\r\n      return {\r\n        data\r\n      }\r\n    } catch(error) {\r\n      throw new Error(params.common.message.error.server)\r\n    }\r\n  }\r\n\r\n  throw new Error(params.user.message.error.auth)\r\n}\r\n"],"file":"query.js"}