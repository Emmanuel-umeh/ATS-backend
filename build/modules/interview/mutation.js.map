{"version":3,"sources":["../../../src/modules/interview/mutation.js"],"names":["interviewCreate","params","projectId","candidateId","interviewerId","dateTime","mode","note","invite","auth","rules","data","value","check","message","common","error","invalidData","Error","Interview","create","organizationId","user","userId","_id","interview","Kanban","findOne","kanban","interviews","push","updateOne","status","progress","shortlisted","highlight","sentEmails","server","interviewUpdate","id","$set","indexOf","interviewRemove","remove","remind","populate","interviewId","type","interviewDetails","date","format","nice","time","modes","filter","item","key","name","subjectAction","update","subject","calendar","method","domain","event","createEvent","start","toDate","end","add","summary","location","description","organizer","email","icalEvent","content","toString","candidateProps","candidateName","organizationName","userName","TemplateCandidate","to","from","cc","template","interviewerProps","interviewerName","TemplateInterviewer","activityAction","Activity","action","activity","types"],"mappings":"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","sourcesContent":["// Imports\r\nimport React from 'react'\r\nimport moment from 'moment'\r\nimport ical from 'ical-generator'\r\n\r\n// App Imports\r\nimport params from '../../setup/config/params'\r\nimport { authCheck } from '../../setup/helpers/utils'\r\nimport validate from '../../setup/helpers/validation'\r\nimport Activity from '../activity/model'\r\nimport Kanban from '../kanban/model'\r\nimport Interview from './model'\r\n\r\n// Email\r\nimport { send as sendEmail } from '../email/send'\r\nimport InterviewInviteCandidate from '../candidate/email/InterviewInvite'\r\nimport InterviewInviteInterviewer from '../interviewer/email/InterviewInvite'\r\nimport InterviewReminderCandidate from '../candidate/email/InterviewReminder'\r\nimport InterviewReminderInterviewer from '../interviewer/email/InterviewReminder'\r\n\r\n// Create\r\nexport async function interviewCreate({ params: { projectId, candidateId, interviewerId, dateTime, mode, note = '', invite = true }, auth }) {\r\n  if(authCheck(auth)) {\r\n    // Validation rules\r\n    const rules = [\r\n      {\r\n        data: { value: projectId },\r\n        check: 'notEmpty',\r\n        message: params.common.message.error.invalidData\r\n      },\r\n      {\r\n        data: { value: candidateId },\r\n        check: 'notEmpty',\r\n        message: 'Please select a candidate.'\r\n      },\r\n      {\r\n        data: { value: interviewerId },\r\n        check: 'notEmpty',\r\n        message: 'Please select an interviewer.'\r\n      },\r\n      {\r\n        data: { value: dateTime },\r\n        check: 'notEmpty',\r\n        message: 'Please select valid date and time.'\r\n      },\r\n      {\r\n        data: { value: mode },\r\n        check: 'notEmpty',\r\n        message: 'Please select valid mode.'\r\n      }\r\n    ]\r\n\r\n    // Validate\r\n    try {\r\n      validate(rules)\r\n    } catch(error) {\r\n      throw new Error(error.message)\r\n    }\r\n\r\n    try {\r\n      // Create interview\r\n      const interview = await Interview.create({\r\n        organizationId: auth.user.organizationId,\r\n        userId: auth.user._id,\r\n        projectId,\r\n        candidateId,\r\n        interviewerId,\r\n        dateTime,\r\n        mode,\r\n        note\r\n      })\r\n\r\n      if(interview) {\r\n        // Add to kanban\r\n        const kanban = await Kanban.findOne({\r\n          organizationId: auth.user.organizationId,\r\n          projectId: projectId,\r\n          candidateId: candidateId\r\n        })\r\n        if (kanban) {\r\n          // Update kanban\r\n          let interviews = kanban.interviews\r\n          interviews.push(interview._id)\r\n          await Kanban.updateOne(\r\n            { _id: kanban._id },\r\n            {\r\n              status: params.kanban.status.progress,\r\n              interviews,\r\n            }\r\n          )\r\n        } else {\r\n          // Create new kanban\r\n          await Kanban.create({\r\n            organizationId: auth.user.organizationId,\r\n            projectId: projectId,\r\n            candidateId: candidateId,\r\n            interviews: [interview._id],\r\n            userId: auth.user._id,\r\n            status: params.kanban.status.shortlisted,\r\n            highlight: false\r\n          })\r\n        }\r\n\r\n        // Send emails\r\n        sentEmails(invite, interview._id, auth, 'invite')\r\n      }\r\n\r\n      return {\r\n        data: interview\r\n      }\r\n    } catch(error) {\r\n      throw new Error(params.common.message.error.server)\r\n    }\r\n  }\r\n\r\n  throw new Error(params.user.message.error.auth)\r\n}\r\n\r\n// Update\r\nexport async function interviewUpdate({ params: { id, projectId, candidateId, interviewerId, dateTime, mode, note = '', invite = true }, auth }) {\r\n  if(authCheck(auth)) {\r\n    // Validation rules\r\n    const rules = [\r\n      {\r\n        data: { value: id },\r\n        check: 'notEmpty',\r\n        message: params.common.message.error.invalidData\r\n      },\r\n      {\r\n        data: { value: projectId },\r\n        check: 'notEmpty',\r\n        message: params.common.message.error.invalidData\r\n      },\r\n      {\r\n        data: { value: candidateId },\r\n        check: 'notEmpty',\r\n        message: 'Please select a candidate.'\r\n      },\r\n      {\r\n        data: { value: interviewerId },\r\n        check: 'notEmpty',\r\n        message: 'Please select an interviewer.'\r\n      },\r\n      {\r\n        data: { value: dateTime },\r\n        check: 'notEmpty',\r\n        message: 'Please select valid date and time.'\r\n      },\r\n      {\r\n        data: { value: mode },\r\n        check: 'notEmpty',\r\n        message: 'Please select valid mode.'\r\n      }\r\n    ]\r\n\r\n    // Validate\r\n    try {\r\n      validate(rules)\r\n    } catch(error) {\r\n      throw new Error(error.message)\r\n    }\r\n\r\n    try {\r\n      const interview = await Interview.updateOne(\r\n        { _id: id },\r\n        {\r\n          $set: {\r\n            projectId,\r\n            candidateId,\r\n            interviewerId,\r\n            dateTime,\r\n            mode,\r\n            note\r\n          }\r\n        }\r\n      )\r\n\r\n      if(interview) {\r\n        // Add to kanban\r\n        const kanban = await Kanban.findOne({\r\n          organizationId: auth.user.organizationId,\r\n          projectId: projectId,\r\n          candidateId: candidateId\r\n        })\r\n\r\n        if (kanban) {\r\n          let interviews = kanban.interviews\r\n          if(interviews.indexOf(id) === -1) {\r\n            interviews.push(id)\r\n            await Kanban.updateOne(\r\n              { _id: kanban._id },\r\n              {\r\n                status: params.kanban.status.progress,\r\n                interviews\r\n              }\r\n            )\r\n          }\r\n        }\r\n      }\r\n\r\n      // Send emails\r\n      await sentEmails(invite, id, auth, 'update')\r\n\r\n      return {\r\n        data: interview\r\n      }\r\n    } catch(error) {\r\n      throw new Error(params.common.message.error.server)\r\n    }\r\n  }\r\n\r\n  throw new Error(params.user.message.error.auth)\r\n}\r\n\r\n// Delete\r\nexport async function interviewRemove({ params: { id }, auth }) {\r\n  if(authCheck(auth)) {\r\n    // Validation rules\r\n    const rules = [\r\n      {\r\n        data: { value: id },\r\n        check: 'notEmpty',\r\n        message: params.common.message.error.invalidData\r\n      }\r\n    ]\r\n\r\n    // Validate\r\n    try {\r\n      validate(rules)\r\n    } catch(error) {\r\n      throw new Error(error.message)\r\n    }\r\n\r\n    try {\r\n      const data = await Interview.remove({\r\n        _id: _id,\r\n        userId: auth.user._id\r\n      })\r\n\r\n      return {\r\n        data\r\n      }\r\n    } catch(error) {\r\n      throw new Error(params.common.message.error.server)\r\n    }\r\n  }\r\n\r\n  throw new Error('Please login to delete interview.')\r\n}\r\n\r\n// Remind\r\nexport async function remind({ params: { id }, auth }) {\r\n  if(authCheck(auth)) {\r\n    // Validation rules\r\n    const rules = [\r\n      {\r\n        data: { value: id },\r\n        check: 'notEmpty',\r\n        message: params.common.message.error.invalidData\r\n      }\r\n    ]\r\n\r\n    // Validate\r\n    try {\r\n      validate(rules)\r\n    } catch(error) {\r\n      throw new Error(error.message)\r\n    }\r\n\r\n    try {\r\n      const interview = await Interview.findOne({\r\n        _id: id,\r\n        organizationId: auth.user.organizationId\r\n      })\r\n        .populate('organizationId')\r\n        .populate('candidateId')\r\n        .populate('interviewerId')\r\n        .populate('userId')\r\n\r\n      // Send emails\r\n\r\n      await sentEmails(true, id, auth, 'remind')\r\n\r\n      return {\r\n        data: interview\r\n      }\r\n    } catch(error) {\r\n      throw new Error(params.common.message.error.server)\r\n    }\r\n  }\r\n\r\n  throw new Error(params.user.message.error.auth)\r\n}\r\n\r\n// Email to Candidate and Interviewer\r\nasync function sentEmails(invite, interviewId, auth, type = 'invite') {\r\n  const interviewDetails = await Interview.findOne({\r\n    _id: interviewId,\r\n    organizationId: auth.user.organizationId\r\n  })\r\n    .populate('organizationId')\r\n    .populate('candidateId')\r\n    .populate('interviewerId')\r\n    .populate('userId')\r\n\r\n  const date = moment(interviewDetails.dateTime).format(`${ params.date.format.nice.date }, ${ params.date.format.nice.time }`)\r\n\r\n  if(invite) {\r\n    const mode = params.interview.modes.filter(item => item.key === interviewDetails.mode)[0].name\r\n    const subjectAction = {\r\n      invite: 'Invitation',\r\n      update: 'Updated',\r\n      remind: 'Reminder',\r\n    }[type]\r\n    const subject = `${ interviewDetails.organizationId.name } Interview ${ subjectAction } - ${ date }`\r\n\r\n    // Calendar\r\n    const calendar = ical({\r\n      method: 'publish',\r\n      domain: interviewDetails.organizationId.domain,\r\n      name: subject\r\n    })\r\n    const event = calendar.createEvent({\r\n      domain: interviewDetails.organizationId.domain,\r\n      start: moment(interviewDetails.dateTime).toDate(),\r\n      end: moment(interviewDetails.dateTime).add(1, 'hour').toDate(),\r\n      summary: subject,\r\n      location: mode,\r\n      description: interviewDetails.note\r\n    })\r\n    event.organizer({\r\n      name: auth.user.name,\r\n      email: auth.user.email,\r\n    })\r\n\r\n    const icalEvent = {content: calendar.toString()}\r\n\r\n    // Send emails\r\n\r\n    // 1. To Candidate\r\n\r\n    const candidateProps = {\r\n      candidateName: interviewDetails.candidateId.name,\r\n      date,\r\n      organizationName: interviewDetails.organizationId.name,\r\n      mode,\r\n      note: interviewDetails.note,\r\n      userName: auth.user.name\r\n    }\r\n\r\n    const TemplateCandidate = {\r\n      invite: <InterviewInviteCandidate {...candidateProps} />,\r\n      update: <InterviewInviteCandidate {...candidateProps} />,\r\n      remind: <InterviewReminderCandidate {...candidateProps} />,\r\n    }[type]\r\n\r\n    await sendEmail({\r\n      to: {name: interviewDetails.candidateId.name, email: interviewDetails.candidateId.email},\r\n      from: auth.user,\r\n      cc: auth.user,\r\n      subject,\r\n      template: TemplateCandidate,\r\n      organizationId: auth.user.organizationId,\r\n      userId: auth.user._id,\r\n      icalEvent\r\n    })\r\n\r\n    // 2. To Interviewer\r\n\r\n    const interviewerProps = {\r\n      interviewId,\r\n      interviewerName: interviewDetails.interviewerId.name,\r\n      candidateId: interviewDetails.candidateId._id,\r\n      candidateName: interviewDetails.candidateId.name,\r\n      date,\r\n      organizationName: interviewDetails.organizationId.name,\r\n      mode,\r\n      note: interviewDetails.note,\r\n      userName: auth.user.name\r\n    }\r\n\r\n    const TemplateInterviewer = {\r\n      invite: <InterviewInviteInterviewer {...interviewerProps} />,\r\n      update: <InterviewInviteInterviewer {...interviewerProps} />,\r\n      remind: <InterviewReminderInterviewer  {...interviewerProps} />,\r\n    }[type]\r\n\r\n    await sendEmail({\r\n      to: {name: interviewDetails.interviewerId.name, email: interviewDetails.interviewerId.email},\r\n      from: auth.user,\r\n      cc: auth.user,\r\n      subject,\r\n      template: TemplateInterviewer,\r\n      organizationId: auth.user.organizationId,\r\n      userId: auth.user._id,\r\n      icalEvent\r\n    })\r\n  }\r\n\r\n  // Log activity\r\n  const activityAction = {\r\n    invite: 'scheduled an',\r\n    update: 'updated the ',\r\n    remind: 'sent a reminder for the'\r\n  }[type]\r\n\r\n  await Activity.create({\r\n    organizationId: auth.user.organizationId,\r\n    userId: auth.user._id,\r\n    projectId: interviewDetails.projectId,\r\n    interviewId: interviewDetails._id,\r\n    candidateId: interviewDetails.candidateId._id,\r\n    interviewerId: interviewDetails.interviewerId._id,\r\n    action: params.activity.types.create,\r\n    message: `${ auth.user.name } ${ activityAction } interview for ${ interviewDetails.candidateId.name } to be conducted by ${ interviewDetails.interviewerId.name } on ${ date }.`\r\n  })\r\n}\r\n"],"file":"mutation.js"}