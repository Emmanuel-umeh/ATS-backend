{"version":3,"sources":["../../../src/modules/kanban/query.js"],"names":["kanban","id","params","fields","auth","rules","data","value","check","message","common","error","invalidData","Error","Kanban","findOne","_id","organizationId","user","select","populate","path","candidate","project","job","interview","interviewer","feedback","server","kanbansByProject","projectId","find"],"mappings":"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","sourcesContent":["// App Imports\r\nimport params from '../../setup/config/params'\r\nimport { authCheck } from '../../setup/helpers/utils'\r\nimport validate from '../../setup/helpers/validation'\r\nimport Kanban from './model'\r\n\r\n// Get by ID\r\nexport async function kanban({ params: { id }, fields, auth }) {\r\n  if(authCheck(auth)) {\r\n    // Validation rules\r\n    const rules = [\r\n      {\r\n        data: { value: id },\r\n        check: 'notEmpty',\r\n        message: params.common.message.error.invalidData\r\n      }\r\n    ]\r\n\r\n    // Validate\r\n    try {\r\n      validate(rules)\r\n    } catch(error) {\r\n      throw new Error(error.message)\r\n    }\r\n\r\n    try {\r\n      const data = await Kanban.findOne({\r\n        _id: id,\r\n        organizationId: auth.user.organizationId\r\n      })\r\n        .select(fields.kanban)\r\n        .populate({\r\n          path: 'candidateId',\r\n          select: fields.candidate,\r\n          populate: [\r\n            { path: 'projectId', select: fields.project },\r\n            { path: 'jobId', select: fields.job }\r\n          ]\r\n        })\r\n        .populate({\r\n          path: 'interviews',\r\n          select: fields.interview,\r\n          populate: [\r\n            { path: 'interviewerId', select: fields.interviewer },\r\n            { path: 'feedbackId', select: fields.feedback }\r\n          ]\r\n        })\r\n\r\n      return {\r\n        data\r\n      }\r\n    } catch(error) {\r\n      throw new Error(params.common.message.error.server)\r\n    }\r\n  }\r\n\r\n  throw new Error(params.user.message.error.auth)\r\n}\r\n\r\n// Get by project\r\nexport async function kanbansByProject({ params: { projectId }, fields, auth }) {\r\n  if(authCheck(auth)) {\r\n    // Validation rules\r\n    const rules = [\r\n      {\r\n        data: { value: projectId },\r\n        check: 'notEmpty',\r\n        message: params.common.message.error.invalidData\r\n      }\r\n    ]\r\n\r\n    // Validate\r\n    try {\r\n      validate(rules)\r\n    } catch(error) {\r\n      throw new Error(error.message)\r\n    }\r\n\r\n    try {\r\n      const data = await Kanban.find({\r\n        organizationId: auth.user.organizationId,\r\n        projectId\r\n      })\r\n        .select(fields.kanban)\r\n        .populate({\r\n          path: 'candidateId',\r\n          select: fields.candidate,\r\n          populate: {\r\n            path: 'jobId',\r\n            select: fields.job\r\n          }\r\n        })\r\n        .populate({\r\n          path: 'interviews',\r\n          select: fields.interview,\r\n          populate: [\r\n            {\r\n              path: 'interviewerId',\r\n              select: fields.interviewer\r\n            },\r\n            {\r\n              path: 'feedbackId',\r\n              select: fields.feedback\r\n            }\r\n          ]\r\n        })\r\n\r\n      return {\r\n        data\r\n      }\r\n    } catch(error) {\r\n      throw new Error(params.common.message.error.server)\r\n    }\r\n  }\r\n\r\n  throw new Error(params.user.message.error.auth)\r\n}\r\n"],"file":"query.js"}