{"version":3,"sources":["../../../src/modules/kanban/mutation.js"],"names":["kanbanCreate","params","projectId","candidateId","interviews","status","highlight","auth","rules","data","value","check","message","common","error","invalidData","Error","Kanban","create","organizationId","user","userId","_id","server","kanbanUpdate","id","updateOne","$set","kanbanUpdateStatus","updated","findOne","populate","kanban","Activity","action","activity","types","update","name","toUpperCase","kanbanRemove","remove"],"mappings":"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","sourcesContent":["// Imports\r\nimport isEmpty from 'lodash/isEmpty'\r\n\r\n// App Imports\r\nimport params from '../../setup/config/params'\r\nimport { authCheck } from '../../setup/helpers/utils'\r\nimport validate from '../../setup/helpers/validation'\r\nimport Activity from '../activity/model'\r\nimport Kanban from './model'\r\n\r\n// Create\r\nexport async function kanbanCreate({ params: { projectId, candidateId, interviews = [], status, highlight = false }, auth }) {\r\n  if(authCheck(auth)) {\r\n    // Validation rules\r\n    const rules = [\r\n      {\r\n        data: { value: projectId },\r\n        check: 'notEmpty',\r\n        message: params.common.message.error.invalidData\r\n      },\r\n      {\r\n        data: { value: candidateId },\r\n        check: 'notEmpty',\r\n        message: params.common.message.error.invalidData\r\n      },\r\n      {\r\n        data: { value: status },\r\n        check: 'notEmpty',\r\n        message: params.common.message.error.invalidData\r\n      }\r\n    ]\r\n\r\n    // Validate\r\n    try {\r\n      validate(rules)\r\n    } catch(error) {\r\n      throw new Error(error.message)\r\n    }\r\n\r\n    try {\r\n      const data = await Kanban.create({\r\n        organizationId: auth.user.organizationId,\r\n        userId: auth.user._id,\r\n        projectId,\r\n        candidateId,\r\n        interviews,\r\n        status,\r\n        highlight\r\n      })\r\n\r\n      return {\r\n        data\r\n      }\r\n    } catch(error) {\r\n      throw new Error(params.common.message.error.server)\r\n    }\r\n  }\r\n\r\n  throw new Error(params.user.message.error.auth)\r\n}\r\n\r\n// Update\r\nexport async function kanbanUpdate({ params: { id, interviews, status, highlight }, auth }) {\r\n  if(authCheck(auth) && !isEmpty(id)) {\r\n    // Validation rules\r\n    const rules = [\r\n      {\r\n        data: { value: id },\r\n        check: 'notEmpty',\r\n        message: params.common.message.error.invalidData\r\n      }\r\n    ]\r\n\r\n    // Validate\r\n    try {\r\n      validate(rules)\r\n    } catch(error) {\r\n      throw new Error(error.message)\r\n    }\r\n\r\n    try {\r\n      const data = await Kanban.updateOne(\r\n        { _id: id },\r\n        {\r\n          $set: {\r\n            projectId,\r\n            interviews,\r\n            status,\r\n            highlight\r\n          }\r\n        }\r\n      )\r\n\r\n      return {\r\n        data\r\n      }\r\n    } catch(error) {\r\n      throw new Error(params.common.message.error.server)\r\n    }\r\n  }\r\n\r\n  throw new Error(params.user.message.error.auth)\r\n}\r\n\r\n// Update status\r\nexport async function kanbanUpdateStatus({ params: { id, status }, auth }) {\r\n  if(authCheck(auth)) {\r\n    // Validation rules\r\n    const rules = [\r\n      {\r\n        data: { value: id },\r\n        check: 'notEmpty',\r\n        message: params.common.message.error.invalidData\r\n      },\r\n      {\r\n        data: { value: status },\r\n        check: 'notEmpty',\r\n        message: 'Please enter valid status.'\r\n      }\r\n    ]\r\n\r\n    // Validate\r\n    try {\r\n      validate(rules)\r\n    } catch(error) {\r\n      throw new Error(error.message)\r\n    }\r\n\r\n    try {\r\n      const updated = await Kanban.updateOne(\r\n        { _id: id },\r\n        {\r\n          $set: {\r\n            status\r\n          }\r\n        }\r\n      )\r\n\r\n      // Log activity\r\n      if(updated) {\r\n        const kanban = await Kanban.findOne({ _id: id }).populate('candidateId')\r\n\r\n        await Activity.create({\r\n          organizationId: auth.user.organizationId,\r\n          userId: auth.user._id,\r\n          projectId: kanban.projectId,\r\n          candidateId: kanban.candidateId._id,\r\n          action: params.activity.types.update,\r\n          message: `${ auth.user.name } updated ${ kanban.candidateId.name }'s status to ${ status.toUpperCase() }.`\r\n        })\r\n      }\r\n\r\n      return {\r\n        data: updated\r\n      }\r\n    } catch(error) {\r\n      throw new Error(params.common.message.error.server)\r\n    }\r\n  }\r\n\r\n  throw new Error(params.user.message.error.auth)\r\n}\r\n\r\n// Delete\r\nexport async function kanbanRemove({ params: { id }, auth }) {\r\n  if(authCheck(auth)) {\r\n    // Validation rules\r\n    const rules = [\r\n      {\r\n        data: { value: id },\r\n        check: 'notEmpty',\r\n        message: params.common.message.error.invalidData\r\n      }\r\n    ]\r\n\r\n    // Validate\r\n    try {\r\n      validate(rules)\r\n    } catch(error) {\r\n      throw new Error(error.message)\r\n    }\r\n\r\n    try {\r\n      const data = await Kanban.remove({\r\n        _id: _id,\r\n        userId: auth.user._id\r\n      })\r\n\r\n      return {\r\n        data\r\n      }\r\n    } catch(error) {\r\n      throw new Error(params.common.message.error.server)\r\n    }\r\n  }\r\n\r\n  throw new Error(params.user.message.error.auth)\r\n}\r\n"],"file":"mutation.js"}