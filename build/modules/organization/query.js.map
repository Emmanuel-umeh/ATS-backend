{"version":3,"sources":["../../../src/modules/organization/query.js"],"names":["organization","id","params","auth","rules","data","value","check","message","common","error","invalidData","Error","Organization","findOne","_id","user","organizationByUser","fields","organizationId","select","server","organizationsByUser","find","userId","organizations"],"mappings":";;;;;;;;;;;;;;;AACA;;AACA;;AACA;;AACA;;AAJA;AAMA;SACsBA,Y;;EA4BtB;;;;gGA5BO;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAwCC,YAAAA,EAAxC,QAA8BC,MAA9B,CAAwCD,EAAxC,EAA8CE,IAA9C,QAA8CA,IAA9C;;AAAA,iBACF,sBAAUA,IAAV,CADE;AAAA;AAAA;AAAA;;AAEH;AACMC,YAAAA,KAHH,GAGW,CACZ;AACEC,cAAAA,IAAI,EAAE;AAAEC,gBAAAA,KAAK,EAAEL;AAAT,eADR;AAEEM,cAAAA,KAAK,EAAE,UAFT;AAGEC,cAAAA,OAAO,EAAEN,mBAAOO,MAAP,CAAcD,OAAd,CAAsBE,KAAtB,CAA4BC;AAHvC,aADY,CAHX,EAWH;;AAXG;AAaD,wCAASP,KAAT;AAbC;AAAA;;AAAA;AAAA;AAAA;AAAA,kBAeK,IAAIQ,KAAJ,CAAU,YAAMJ,OAAhB,CAfL;;AAAA;AAAA;AAAA,mBAkBwBK,kBAAaC,OAAb,CAAqB;AAAEC,cAAAA,GAAG,EAAEd;AAAP,aAArB,CAlBxB;;AAAA;AAkBGD,YAAAA,cAlBH;AAAA,6CAoBI;AACLK,cAAAA,IAAI,EAAEL;AADD,aApBJ;;AAAA;AAAA,kBAyBC,IAAIY,KAAJ,CAAUV,mBAAOc,IAAP,CAAYR,OAAZ,CAAoBE,KAApB,CAA0BP,IAApC,CAzBD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SA6Bec,kB;;EAkBtB;;;;sGAlBO;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAoCC,YAAAA,MAApC,SAAoCA,MAApC,EAA4Cf,IAA5C,SAA4CA,IAA5C;;AAAA,iBACF,sBAAUA,IAAV,CADE;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,mBAG0BU,kBACxBC,OADwB,CAChB;AAAEC,cAAAA,GAAG,EAAEZ,IAAI,CAACa,IAAL,CAAUG;AAAjB,aADgB,EAExBC,MAFwB,CAEjBF,MAFiB,CAH1B;;AAAA;AAGKlB,YAAAA,cAHL;AAAA,8CAOM;AACLK,cAAAA,IAAI,EAAEL;AADD,aAPN;;AAAA;AAAA;AAAA;AAAA,kBAWK,IAAIY,KAAJ,CAAUV,mBAAOO,MAAP,CAAcD,OAAd,CAAsBE,KAAtB,CAA4BW,MAAtC,CAXL;;AAAA;AAAA,kBAeC,IAAIT,KAAJ,CAAUV,mBAAOc,IAAP,CAAYR,OAAZ,CAAoBE,KAApB,CAA0BP,IAApC,CAfD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAmBemB,mB;;;;;uGAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAqCJ,YAAAA,MAArC,SAAqCA,MAArC,EAA6Cf,IAA7C,SAA6CA,IAA7C;;AAAA,iBACF,sBAAUA,IAAV,CADE;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,mBAG2BU,kBACzBU,IADyB,CACpB;AAAEC,cAAAA,MAAM,EAAErB,IAAI,CAACa,IAAL,CAAUD;AAApB,aADoB,EAEzBK,MAFyB,CAElBF,MAFkB,CAH3B;;AAAA;AAGKO,YAAAA,aAHL;AAAA,8CAOM;AACLpB,cAAAA,IAAI,EAAEoB;AADD,aAPN;;AAAA;AAAA;AAAA;AAAA,kBAWK,IAAIb,KAAJ,CAAUV,mBAAOO,MAAP,CAAcD,OAAd,CAAsBE,KAAtB,CAA4BW,MAAtC,CAXL;;AAAA;AAAA,kBAeC,IAAIT,KAAJ,CAAUV,mBAAOc,IAAP,CAAYR,OAAZ,CAAoBE,KAApB,CAA0BP,IAApC,CAfD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["// App Imports\r\nimport params from '../../setup/config/params'\r\nimport { authCheck } from '../../setup/helpers/utils'\r\nimport validate from '../../setup/helpers/validation'\r\nimport Organization from './model'\r\n\r\n// Get by ID\r\nexport async function organization({ params: { id }, auth }) {\r\n  if(authCheck(auth)) {\r\n    // Validation rules\r\n    const rules = [\r\n      {\r\n        data: { value: id },\r\n        check: 'notEmpty',\r\n        message: params.common.message.error.invalidData\r\n      }\r\n    ]\r\n\r\n    // Validate\r\n    try {\r\n      validate(rules)\r\n    } catch(error) {\r\n      throw new Error(error.message)\r\n    }\r\n\r\n    const organization = await Organization.findOne({ _id: id })\r\n\r\n    return {\r\n      data: organization\r\n    }\r\n  }\r\n\r\n  throw new Error(params.user.message.error.auth)\r\n}\r\n\r\n// Get by user\r\nexport async function organizationByUser({ fields, auth }) {\r\n  if(authCheck(auth)) {\r\n    try {\r\n      const organization = await Organization\r\n        .findOne({ _id: auth.user.organizationId })\r\n        .select(fields)\r\n\r\n      return {\r\n        data: organization\r\n      }\r\n    } catch(error) {\r\n      throw new Error(params.common.message.error.server)\r\n    }\r\n  }\r\n\r\n  throw new Error(params.user.message.error.auth)\r\n}\r\n\r\n// Get all\r\nexport async function organizationsByUser({ fields, auth }) {\r\n  if(authCheck(auth)) {\r\n    try {\r\n      const organizations = await Organization\r\n        .find({ userId: auth.user._id })\r\n        .select(fields)\r\n\r\n      return {\r\n        data: organizations\r\n      }\r\n    } catch(error) {\r\n      throw new Error(params.common.message.error.server)\r\n    }\r\n  }\r\n\r\n  throw new Error(params.user.message.error.auth)\r\n}\r\n"],"file":"query.js"}