{"version":3,"sources":["../../../src/modules/activity/model.js"],"names":["collection","Schema","mongoose","organizationId","type","Types","ObjectId","required","ref","Organization","index","projectId","Project","userId","User","candidateId","Candidate","interviewerId","Interviewer","interviewId","Interview","inviteId","Invite","jobId","Job","kanbanId","Kanban","action","String","message","timestamps","model"],"mappings":";;;;;;;;;AACA;;AAGA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAZA;AAGA;AAWA;AACO,IAAMA,UAAU,GAAG,YAAnB,C,CAEP;;;AACA,IAAMC,MAAM,GAAG,IAAIC,qBAASD,MAAb,CAAoB;AACjCE,EAAAA,cAAc,EAAE;AACdC,IAAAA,IAAI,EAAEF,qBAASD,MAAT,CAAgBI,KAAhB,CAAsBC,QADd;AAEdC,IAAAA,QAAQ,EAAE,IAFI;AAGdC,IAAAA,GAAG,EAAEC,iBAHS;AAIdC,IAAAA,KAAK,EAAE;AAJO,GADiB;AAOjCC,EAAAA,SAAS,EAAE;AACTP,IAAAA,IAAI,EAAEF,qBAASD,MAAT,CAAgBI,KAAhB,CAAsBC,QADnB;AAETE,IAAAA,GAAG,EAAEI,kBAFI;AAGTF,IAAAA,KAAK,EAAE;AAHE,GAPsB;AAYjCG,EAAAA,MAAM,EAAE;AACNT,IAAAA,IAAI,EAAEF,qBAASD,MAAT,CAAgBI,KAAhB,CAAsBC,QADtB;AAENE,IAAAA,GAAG,EAAEM;AAFC,GAZyB;AAgBjCC,EAAAA,WAAW,EAAE;AACXX,IAAAA,IAAI,EAAEF,qBAASD,MAAT,CAAgBI,KAAhB,CAAsBC,QADjB;AAEXE,IAAAA,GAAG,EAAEQ;AAFM,GAhBoB;AAoBjCC,EAAAA,aAAa,EAAE;AACbb,IAAAA,IAAI,EAAEF,qBAASD,MAAT,CAAgBI,KAAhB,CAAsBC,QADf;AAEbE,IAAAA,GAAG,EAAEU;AAFQ,GApBkB;AAwBjCC,EAAAA,WAAW,EAAE;AACXf,IAAAA,IAAI,EAAEF,qBAASD,MAAT,CAAgBI,KAAhB,CAAsBC,QADjB;AAEXE,IAAAA,GAAG,EAAEY;AAFM,GAxBoB;AA4BjCC,EAAAA,QAAQ,EAAE;AACRjB,IAAAA,IAAI,EAAEF,qBAASD,MAAT,CAAgBI,KAAhB,CAAsBC,QADpB;AAERE,IAAAA,GAAG,EAAEc;AAFG,GA5BuB;AAgCjCC,EAAAA,KAAK,EAAE;AACLnB,IAAAA,IAAI,EAAEF,qBAASD,MAAT,CAAgBI,KAAhB,CAAsBC,QADvB;AAELE,IAAAA,GAAG,EAAEgB;AAFA,GAhC0B;AAoCjCC,EAAAA,QAAQ,EAAE;AACRrB,IAAAA,IAAI,EAAEF,qBAASD,MAAT,CAAgBI,KAAhB,CAAsBC,QADpB;AAERE,IAAAA,GAAG,EAAEkB;AAFG,GApCuB;AAwCjCC,EAAAA,MAAM,EAAE;AACNvB,IAAAA,IAAI,EAAEwB,MADA;AAENrB,IAAAA,QAAQ,EAAE;AAFJ,GAxCyB;AA4CjCsB,EAAAA,OAAO,EAAE;AACPzB,IAAAA,IAAI,EAAEwB,MADC;AAEPrB,IAAAA,QAAQ,EAAE;AAFH;AA5CwB,CAApB,EAgDZ;AAACuB,EAAAA,UAAU,EAAE;AAAb,CAhDY,CAAf,C,CAkDA;;eACe5B,qBAAS6B,KAAT,CAAe/B,UAAf,EAA2BC,MAA3B,EAAmCD,UAAnC,C","sourcesContent":["// Imports\r\nimport mongoose from 'mongoose'\r\n\r\n// App Imports\r\nimport { collection as Organization } from '../organization/model'\r\nimport { collection as Project } from '../project/model'\r\nimport { collection as Candidate } from '../candidate/model'\r\nimport { collection as Interviewer } from '../interviewer/model'\r\nimport { collection as Interview } from '../interview/model'\r\nimport { collection as User } from '../user/model'\r\nimport { collection as Invite } from '../invite/model'\r\nimport { collection as Job } from '../job/model'\r\nimport { collection as Kanban } from '../kanban/model'\r\n\r\n// Collection name\r\nexport const collection = 'Activities'\r\n\r\n// Schema\r\nconst Schema = new mongoose.Schema({\r\n  organizationId: {\r\n    type: mongoose.Schema.Types.ObjectId,\r\n    required: true,\r\n    ref: Organization,\r\n    index: true\r\n  },\r\n  projectId: {\r\n    type: mongoose.Schema.Types.ObjectId,\r\n    ref: Project,\r\n    index: true\r\n  },\r\n  userId: {\r\n    type: mongoose.Schema.Types.ObjectId,\r\n    ref: User\r\n  },\r\n  candidateId: {\r\n    type: mongoose.Schema.Types.ObjectId,\r\n    ref: Candidate\r\n  },\r\n  interviewerId: {\r\n    type: mongoose.Schema.Types.ObjectId,\r\n    ref: Interviewer\r\n  },\r\n  interviewId: {\r\n    type: mongoose.Schema.Types.ObjectId,\r\n    ref: Interview\r\n  },\r\n  inviteId: {\r\n    type: mongoose.Schema.Types.ObjectId,\r\n    ref: Invite\r\n  },\r\n  jobId: {\r\n    type: mongoose.Schema.Types.ObjectId,\r\n    ref: Job\r\n  },\r\n  kanbanId: {\r\n    type: mongoose.Schema.Types.ObjectId,\r\n    ref: Kanban\r\n  },\r\n  action: {\r\n    type: String,\r\n    required: true\r\n  },\r\n  message: {\r\n    type: String,\r\n    required: true\r\n  }\r\n}, {timestamps: true})\r\n\r\n// Model\r\nexport default mongoose.model(collection, Schema, collection)\r\n"],"file":"model.js"}