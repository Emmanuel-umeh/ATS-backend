{"version":3,"sources":["../../../src/modules/activity/query.js"],"names":["activitiesByOrganization","fields","auth","Activity","find","organizationId","user","sort","createdAt","select","data","Error","params","common","message","error","server","activitiesByProject","projectId","rules","value","check","invalidData","activitiesByCandidate","candidateId"],"mappings":"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","sourcesContent":["// App Imports\r\nimport params from '../../setup/config/params'\r\nimport { authCheck } from '../../setup/helpers/utils'\r\nimport validate from '../../setup/helpers/validation'\r\nimport Activity from './model'\r\n\r\n// Get by project\r\nexport async function activitiesByOrganization({ fields, auth }) {\r\n  if(authCheck(auth)) {\r\n    try {\r\n      const data = await Activity.find({\r\n        organizationId: auth.user.organizationId\r\n      })\r\n        .sort({ createdAt: -1 })\r\n        .select(fields)\r\n\r\n      return {\r\n        data\r\n      }\r\n    } catch(error) {\r\n      throw new Error(params.common.message.error.server)\r\n    }\r\n  }\r\n\r\n  throw new Error(params.user.message.error.auth)\r\n}\r\n\r\n// Get by project\r\nexport async function activitiesByProject({ params: { projectId }, fields, auth }) {\r\n  if(authCheck(auth)) {\r\n    // Validation rules\r\n    const rules = [\r\n      {\r\n        data: { value: projectId },\r\n        check: 'notEmpty',\r\n        message: params.common.message.error.invalidData\r\n      }\r\n    ]\r\n\r\n    // Validate\r\n    try {\r\n      validate(rules)\r\n    } catch(error) {\r\n      throw new Error(error.message)\r\n    }\r\n\r\n    try {\r\n      const data = await Activity.find({\r\n        organizationId: auth.user.organizationId,\r\n        projectId\r\n      })\r\n        .sort({ createdAt: -1 })\r\n        .select(fields)\r\n\r\n      return {\r\n        data\r\n      }\r\n    } catch(error) {\r\n      throw new Error(params.common.message.error.server)\r\n    }\r\n  }\r\n\r\n  throw new Error(params.user.message.error.auth)\r\n}\r\n\r\n// Get by candidate\r\nexport async function activitiesByCandidate({ params: { candidateId }, fields, auth }) {\r\n  if(authCheck(auth)) {\r\n    // Validation rules\r\n    const rules = [\r\n      {\r\n        data: { value: candidateId },\r\n        check: 'notEmpty',\r\n        message: params.common.message.error.invalidData\r\n      }\r\n    ]\r\n\r\n    // Validate\r\n    try {\r\n      validate(rules)\r\n    } catch(error) {\r\n      throw new Error(error.message)\r\n    }\r\n\r\n    try {\r\n      const data = await Activity.find({\r\n        organizationId: auth.user.organizationId,\r\n        candidateId\r\n      })\r\n        .sort({ createdAt: 1 })\r\n        .select(fields)\r\n\r\n      return {\r\n        data\r\n      }\r\n    } catch(error) {\r\n      throw new Error(params.common.message.error.server)\r\n    }\r\n  }\r\n\r\n  throw new Error(params.user.message.error.auth)\r\n}\r\n"],"file":"query.js"}