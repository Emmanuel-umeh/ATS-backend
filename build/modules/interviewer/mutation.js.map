{"version":3,"sources":["../../../src/modules/interviewer/mutation.js"],"names":["interviewerCreate","params","projectId","name","email","mobile","auth","rules","data","value","check","message","common","error","invalidData","Error","Interviewer","create","organizationId","user","userId","_id","interviewer","Activity","interviewerId","action","activity","types","server","interviewerUpdate","id","updateOne","$set","interviewerRemove","remove"],"mappings":"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","sourcesContent":["// App Imports\r\nimport params from '../../setup/config/params'\r\nimport { authCheck } from '../../setup/helpers/utils'\r\nimport validate from '../../setup/helpers/validation'\r\nimport Activity from '../activity/model'\r\nimport Interviewer from './model'\r\n\r\n// Create\r\nexport async function interviewerCreate({ params: { projectId, name, email, mobile }, auth }) {\r\n  if(authCheck(auth)) {\r\n    // Validation rules\r\n    const rules = [\r\n      {\r\n        data: { value: projectId },\r\n        check: 'notEmpty',\r\n        message: params.common.message.error.invalidData\r\n      },\r\n      {\r\n        data: { value: name },\r\n        check: 'notEmpty',\r\n        message: 'Please enter valid name.'\r\n      },\r\n      {\r\n        data: { value: email },\r\n        check: 'email',\r\n        message: 'Please enter valid email.'\r\n      },\r\n      {\r\n        data: { value: mobile },\r\n        check: 'notEmpty',\r\n        message: 'Please enter valid mobile number.'\r\n      }\r\n    ]\r\n\r\n    // Validate\r\n    try {\r\n      validate(rules)\r\n    } catch(error) {\r\n      throw new Error(error.message)\r\n    }\r\n\r\n    try {\r\n      const interviewer = await Interviewer.create({\r\n        organizationId: auth.user.organizationId,\r\n        userId: auth.user._id,\r\n        projectId,\r\n        name,\r\n        email,\r\n        mobile\r\n      })\r\n\r\n      if(interviewer) {\r\n        // Log activity\r\n        await Activity.create({\r\n          organizationId: auth.user.organizationId,\r\n          userId: auth.user._id,\r\n          projectId,\r\n          interviewerId: interviewer._id,\r\n          action: params.activity.types.create,\r\n          message: `${ auth.user.name } added a new interviewer ${ name } (${ email }).`\r\n        })\r\n      }\r\n\r\n      return {\r\n        data: interviewer\r\n      }\r\n    } catch(error) {\r\n      throw new Error(params.common.message.error.server)\r\n    }\r\n  }\r\n\r\n  throw new Error(params.user.message.error.auth)\r\n}\r\n\r\n// Update\r\nexport async function interviewerUpdate({ params: { id, projectId, name, email, mobile }, auth }) {\r\n  if(authCheck(auth)) {\r\n    // Validation rules\r\n    const rules = [\r\n      {\r\n        data: { value: id },\r\n        check: 'notEmpty',\r\n        message: params.common.message.error.invalidData\r\n      },\r\n      {\r\n        data: { value: projectId },\r\n        check: 'notEmpty',\r\n        message: params.common.message.error.invalidData\r\n      },\r\n      {\r\n        data: { value: name },\r\n        check: 'notEmpty',\r\n        message: 'Please enter valid name.'\r\n      },\r\n      {\r\n        data: { value: email },\r\n        check: 'email',\r\n        message: 'Please enter valid email.'\r\n      },\r\n      {\r\n        data: { value: mobile },\r\n        check: 'notEmpty',\r\n        message: 'Please enter valid mobile number.'\r\n      }\r\n    ]\r\n\r\n    // Validate\r\n    try {\r\n      validate(rules)\r\n    } catch(error) {\r\n      throw new Error(error.message)\r\n    }\r\n\r\n    try {\r\n      const data = await Interviewer.updateOne(\r\n        { _id: id },\r\n        {\r\n          $set: {\r\n            projectId,\r\n            name,\r\n            email,\r\n            mobile\r\n          }\r\n        }\r\n      )\r\n\r\n      return {\r\n        data\r\n      }\r\n    } catch(error) {\r\n      throw new Error(params.common.message.error.server)\r\n    }\r\n  }\r\n\r\n  throw new Error(params.user.message.error.auth)\r\n}\r\n\r\n// Delete\r\nexport async function interviewerRemove({ params: { id }, auth }) {\r\n  if(authCheck(auth)) {\r\n    // Validation rules\r\n    const rules = [\r\n      {\r\n        data: { value: id },\r\n        check: 'notEmpty',\r\n        message: params.common.message.error.invalidData\r\n      }\r\n    ]\r\n\r\n    // Validate\r\n    try {\r\n      validate(rules)\r\n    } catch(error) {\r\n      throw new Error(error.message)\r\n    }\r\n\r\n    try {\r\n      const data = await Interviewer.remove({\r\n        _id: id,\r\n        userId: auth.user._id\r\n      })\r\n\r\n      return {\r\n        data\r\n      }\r\n    } catch(error) {\r\n      throw new Error(params.common.message.error.server)\r\n    }\r\n  }\r\n\r\n  throw new Error(params.user.message.error.auth)\r\n}\r\n"],"file":"mutation.js"}