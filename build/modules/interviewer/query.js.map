{"version":3,"sources":["../../../src/modules/interviewer/query.js"],"names":["interviewer","id","params","auth","rules","data","value","check","message","common","error","invalidData","Error","Interviewer","findOne","_id","server","user","interviewersByProject","projectId","fields","project","find","organizationId","select","populate","path","interviewersByOrganization"],"mappings":"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","sourcesContent":["// App Imports\r\nimport params from '../../setup/config/params'\r\nimport { authCheck } from '../../setup/helpers/utils'\r\nimport validate from '../../setup/helpers/validation'\r\nimport Interviewer from './model'\r\n\r\n// Get interviewer by ID\r\nexport async function interviewer({ params: { id }}) {\r\n  if(authCheck(auth)) {\r\n    // Validation rules\r\n    const rules = [\r\n      {\r\n        data: { value: id },\r\n        check: 'notEmpty',\r\n        message: params.common.message.error.invalidData\r\n      }\r\n    ]\r\n\r\n    // Validate\r\n    try {\r\n      validate(rules)\r\n    } catch(error) {\r\n      throw new Error(error.message)\r\n    }\r\n\r\n    try {\r\n      const data = await Interviewer.findOne({ _id: id })\r\n\r\n      return {\r\n        data\r\n      }\r\n    } catch(error) {\r\n      throw new Error(params.common.message.error.server)\r\n    }\r\n  }\r\n\r\n  throw new Error(params.user.message.error.auth)\r\n}\r\n\r\n// Get by project\r\nexport async function interviewersByProject({ params: { projectId }, fields = { interviewer: [], project: [] }, auth }) {\r\n  if(authCheck(auth)) {\r\n    // Validation rules\r\n    const rules = [\r\n      {\r\n        data: { value: projectId },\r\n        check: 'notEmpty',\r\n        message: params.common.message.error.invalidData\r\n      }\r\n    ]\r\n\r\n    // Validate\r\n    try {\r\n      validate(rules)\r\n    } catch(error) {\r\n      throw new Error(error.message)\r\n    }\r\n\r\n    try {\r\n      const data = await Interviewer.find({\r\n        organizationId: auth.user.organizationId,\r\n        projectId\r\n      })\r\n        .select(fields.interviewer)\r\n        .populate({ path: 'projectId', select: fields.project })\r\n\r\n      return {\r\n        data\r\n      }\r\n    } catch(error) {\r\n      throw new Error(params.common.message.error.server)\r\n    }\r\n  }\r\n\r\n  throw new Error(params.user.message.error.auth)\r\n}\r\n\r\n// Get by organization\r\nexport async function interviewersByOrganization({ fields = { interviewer: [], project: [] }, auth }) {\r\n  if(authCheck(auth)) {\r\n    try {\r\n      const data = await Interviewer.find({\r\n        organizationId: auth.user.organizationId\r\n      })\r\n        .select(fields.interviewer)\r\n        .populate({ path: 'projectId', select: fields.project })\r\n\r\n      return {\r\n        data\r\n      }\r\n    } catch(error) {\r\n      throw new Error(params.common.message.error.server)\r\n    }\r\n  }\r\n\r\n  throw new Error(params.user.message.error.auth)\r\n}\r\n"],"file":"query.js"}