{"version":3,"sources":["../../../src/modules/email/send.js"],"names":["transport","EMAIL_HOST","EMAIL_USER","EMAIL_PASSWORD","nodemailer","createTransport","host","secure","auth","user","pass","send","to","from","subject","template","cc","organizationId","userId","icalEvent","transporter","body","params","site","name","toEmail","NODE_ENV","EMAIL_TEST","email","toAddress","length","emails","hello","replyTo","html","EMAIL_ON","sendMail","console","info","emailSave","fromName","fromEmail","toName","Email","create","warn"],"mappings":"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","sourcesContent":["// Imports\r\nimport nodemailer from 'nodemailer'\r\nimport React from 'react'\r\nimport { renderToStaticMarkup } from 'react-dom/server'\r\n\r\n// App Imports\r\nimport { EMAIL_ON, EMAIL_HOST, EMAIL_USER, EMAIL_PASSWORD, EMAIL_TEST, NODE_ENV } from '../../setup/config/env'\r\nimport params from '../../setup/config/params'\r\nimport Email from './model'\r\nimport view from './template/view'\r\nimport Layout from './template/Layout'\r\n\r\n// email\r\nfunction transport() {\r\n  if(EMAIL_HOST && EMAIL_USER && EMAIL_PASSWORD) {\r\n    return nodemailer.createTransport({\r\n      host: EMAIL_HOST,\r\n      secure: false,\r\n      auth: {\r\n        user: EMAIL_USER,\r\n        pass: EMAIL_PASSWORD\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nexport async function send({ to, from, subject, template, cc = null, organizationId = '', userId = '', icalEvent = '' }) {\r\n  const transporter = transport()\r\n\r\n  if(transporter) {\r\n    // Create markup\r\n    const body = view(renderToStaticMarkup(\r\n      <Layout>\r\n        { template }\r\n      </Layout>\r\n    ))\r\n\r\n    subject = `${ params.site.name } - ${ subject }`\r\n\r\n    const toEmail = NODE_ENV === 'development' ? EMAIL_TEST : to.email\r\n    const toAddress = to.name && to.name.length > 0 ? `\"${ to.name }\" <${ toEmail }>` : toEmail\r\n\r\n    let email = {\r\n      to: toAddress,\r\n      from: `\"${ from.name }\" <${ params.site.emails.hello.email }>`,\r\n      replyTo: `\"${ from.name }\" <${ from.email }>`,\r\n      subject,\r\n      html: body,\r\n    }\r\n    if(cc) {\r\n      email.cc = `\"${ cc.name }\" <${ NODE_ENV === 'development' ? EMAIL_TEST : cc.email }>`\r\n    }\r\n    if(icalEvent) {\r\n      email.icalEvent = icalEvent\r\n    }\r\n\r\n    // Send email\r\n    if(EMAIL_ON === '1') {\r\n      transporter.sendMail(email, () => {\r\n        console.info('INFO - Email sent.')\r\n      })\r\n    } else {\r\n      console.info('INFO - Email not sent. EMAIL_ON is not enabled.')\r\n    }\r\n\r\n    // Save into database\r\n    let emailSave = {\r\n      toEmail: to.email,\r\n      fromName: from.name,\r\n      fromEmail: from.email,\r\n      subject,\r\n      body\r\n    }\r\n    if(to.name && to.name.length > 0) {\r\n      emailSave.toName = to.name\r\n    }\r\n    if(organizationId) {\r\n      emailSave.organizationId = organizationId\r\n    }\r\n    if(userId) {\r\n      emailSave.userId = userId\r\n    }\r\n\r\n    return await Email.create(emailSave)\r\n  } else {\r\n    console.warn('WARN - Email not sent. Please check `.env` to set email configurations.')\r\n  }\r\n}\r\n"],"file":"send.js"}