{"version":3,"sources":["../../../src/modules/invite/query.js"],"names":["invite","id","params","rules","data","value","check","message","common","error","invalidData","Error","Invite","findOne","_id","accepted","populate","server","invitesByOrganization","auth","find","organizationId","user"],"mappings":";;;;;;;;;;;;;;AACA;;AACA;;AACA;;AACA;;AAJA;AAMA;SACsBA,M;;EA6BtB;;;;0FA7BO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkCC,YAAAA,EAAlC,QAAwBC,MAAxB,CAAkCD,EAAlC;AACL;AACME,YAAAA,KAFD,GAES,CACZ;AACEC,cAAAA,IAAI,EAAE;AAAEC,gBAAAA,KAAK,EAAEJ;AAAT,eADR;AAEEK,cAAAA,KAAK,EAAE,UAFT;AAGEC,cAAAA,OAAO,EAAEL,mBAAOM,MAAP,CAAcD,OAAd,CAAsBE,KAAtB,CAA4BC;AAHvC,aADY,CAFT,EAUL;;AAVK;AAYH,wCAASP,KAAT;AAZG;AAAA;;AAAA;AAAA;AAAA;AAAA,kBAcG,IAAIQ,KAAJ,CAAU,YAAMJ,OAAhB,CAdH;;AAAA;AAAA;AAAA;AAAA,mBAkBgBK,kBAAOC,OAAP,CAAe;AAAEC,cAAAA,GAAG,EAAEb,EAAP;AAAWc,cAAAA,QAAQ,EAAE;AAArB,aAAf,EAChBC,QADgB,CACP,gBADO,CAlBhB;;AAAA;AAkBGZ,YAAAA,IAlBH;AAAA,6CAqBI;AACLA,cAAAA,IAAI,EAAJA;AADK,aArBJ;;AAAA;AAAA;AAAA;AAAA,kBAyBG,IAAIO,KAAJ,CAAUT,mBAAOM,MAAP,CAAcD,OAAd,CAAsBE,KAAtB,CAA4BQ,MAAtC,CAzBH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SA8BeC,qB;;;;;yGAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAuCC,YAAAA,IAAvC,SAAuCA,IAAvC;;AAAA,iBACF,sBAAUA,IAAV,CADE;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,mBAGkBP,kBAAOQ,IAAP,CAAY;AAC7BC,cAAAA,cAAc,EAAEF,IAAI,CAACG,IAAL,CAAUD,cADG;AAE7BN,cAAAA,QAAQ,EAAE;AAFmB,aAAZ,CAHlB;;AAAA;AAGKX,YAAAA,IAHL;AAAA,8CAQM;AACLA,cAAAA,IAAI,EAAJA;AADK,aARN;;AAAA;AAAA;AAAA;AAAA,kBAYK,IAAIO,KAAJ,CAAUT,mBAAOM,MAAP,CAAcD,OAAd,CAAsBE,KAAtB,CAA4BQ,MAAtC,CAZL;;AAAA;AAAA,kBAgBC,IAAIN,KAAJ,CAAUT,mBAAOoB,IAAP,CAAYf,OAAZ,CAAoBE,KAApB,CAA0BU,IAApC,CAhBD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["// App Imports\r\nimport params from '../../setup/config/params'\r\nimport { authCheck } from '../../setup/helpers/utils'\r\nimport validate from '../../setup/helpers/validation'\r\nimport Invite from './model'\r\n\r\n// Get by id\r\nexport async function invite({ params: { id } }) {\r\n  // Validation rules\r\n  const rules = [\r\n    {\r\n      data: { value: id },\r\n      check: 'notEmpty',\r\n      message: params.common.message.error.invalidData\r\n    }\r\n  ]\r\n\r\n  // Validate\r\n  try {\r\n    validate(rules)\r\n  } catch(error) {\r\n    throw new Error(error.message)\r\n  }\r\n\r\n  try {\r\n    const data = await Invite.findOne({ _id: id, accepted: false })\r\n      .populate('organizationId')\r\n\r\n    return {\r\n      data\r\n    }\r\n  } catch(error) {\r\n    throw new Error(params.common.message.error.server)\r\n  }\r\n}\r\n\r\n// Get by organization\r\nexport async function invitesByOrganization({ auth }) {\r\n  if(authCheck(auth)) {\r\n    try {\r\n      const data = await Invite.find({\r\n        organizationId: auth.user.organizationId,\r\n        accepted: false\r\n      })\r\n\r\n      return {\r\n        data\r\n      }\r\n    } catch(error) {\r\n      throw new Error(params.common.message.error.server)\r\n    }\r\n  }\r\n\r\n  throw new Error(params.user.message.error.auth)\r\n}\r\n"],"file":"query.js"}