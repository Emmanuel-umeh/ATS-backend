{"version":3,"sources":["../../../src/modules/invite/mutation.js"],"names":["inviteToOrganization","params","name","email","auth","rules","data","value","check","message","Error","Invite","findOne","invited","create","organizationId","user","userId","_id","accepted","invite","Organization","organization","to","from","subject","template","Activity","inviteId","action","activity","types","common","error","server"],"mappings":"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","sourcesContent":["// Imports\r\nimport React from 'react'\r\n\r\n// App Imports\r\nimport params from '../../setup/config/params'\r\nimport { authCheck } from '../../setup/helpers/utils'\r\nimport validate from '../../setup/helpers/validation'\r\nimport Organization from '../organization/model'\r\nimport Activity from '../activity/model'\r\nimport Invite from '../invite/model'\r\n\r\n// Email\r\nimport { send as sendEmail } from '../email/send'\r\nimport InviteTemplate from './email/Invite'\r\n\r\n// Create invite to organization\r\nexport async function inviteToOrganization({ params: { name, email }, auth }) {\r\n  if(authCheck(auth)) {\r\n    // Validation rules\r\n    const rules = [\r\n      {\r\n        data: { value: name },\r\n        check: 'notEmpty',\r\n        message: 'Please enter valid name.'\r\n      },\r\n      {\r\n        data: { value: email },\r\n        check: 'email',\r\n        message: 'Please enter valid email.'\r\n      }\r\n    ]\r\n\r\n    // Validate\r\n    try {\r\n      validate(rules)\r\n    } catch(error) {\r\n      throw new Error(error.message)\r\n    }\r\n\r\n    try {\r\n      // Users exists with same email check\r\n      const invited = await Invite.findOne({ email })\r\n\r\n      if (!invited) {\r\n        const invite = await Invite.create({\r\n          organizationId: auth.user.organizationId,\r\n          userId: auth.user._id,\r\n          email,\r\n          name,\r\n          accepted: false\r\n        })\r\n\r\n        // Send invite email\r\n        const organization = await Organization.findOne({ _id: auth.user.organizationId })\r\n\r\n        await sendEmail({\r\n          to: {\r\n            name,\r\n            email\r\n          },\r\n          from: auth.user,\r\n          subject: 'You have been invited!',\r\n          template:\r\n            <InviteTemplate\r\n              invitedTo={name}\r\n              invitedBy={auth.user.name}\r\n              invitedCode={invite._id}\r\n              organizationName={organization.name}\r\n            />,\r\n          organizationId: auth.user.organizationId,\r\n          userId: auth.user._id\r\n        })\r\n\r\n        // Log activity\r\n        if(invite) {\r\n          await Activity.create({\r\n            organizationId: auth.user.organizationId,\r\n            userId: auth.user._id,\r\n            inviteId: invite._id,\r\n            action: params.activity.types.create,\r\n            message: `${ auth.user.name } invited ${ name } (${ email }) to the organization.`\r\n          })\r\n        }\r\n\r\n        return {\r\n          data: invite\r\n        }\r\n      } else {\r\n        // User exists\r\n        throw new Error(`The email ${ email } is already invited. Please ask the user to accept the invitation.`)\r\n      }\r\n    } catch(error) {\r\n      throw new Error(params.common.message.error.server)\r\n    }\r\n  }\r\n\r\n  throw new Error(params.user.message.error.auth)\r\n}\r\n"],"file":"mutation.js"}