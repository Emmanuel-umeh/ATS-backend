{"version":3,"sources":["../../../src/modules/user/query.js"],"names":["userLogin","params","email","password","rules","data","value","check","message","length","user","passwordMinLength","Error","response","success","User","findOne","bcrypt","compare","passwordMatch","userAuthResponse","common","error","server","id","invalidData","auth","_id","usersByOrganization","fields","find","organizationId","select","name","role","demo","token","jwt","sign","SECURITY_SECRET"],"mappings":"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","sourcesContent":["// Imports\r\nimport bcrypt from 'bcrypt'\r\nimport jwt from 'jsonwebtoken'\r\n\r\n// App Imports\r\nimport { SECURITY_SECRET } from '../../setup/config/env'\r\nimport params from '../../setup/config/params'\r\nimport { authCheck } from '../../setup/helpers/utils'\r\nimport validate from '../../setup/helpers/validation'\r\nimport User from './model'\r\n\r\n// Login\r\nexport async function userLogin({ params: { email, password } }) {\r\n  // Validation rules\r\n  const rules = [\r\n    {\r\n      data: { value: email },\r\n      check: 'email',\r\n      message: 'Please enter valid email.'\r\n    },\r\n    {\r\n      data: { value: password, length: params.user.rules.passwordMinLength },\r\n      check: 'lengthMin',\r\n      message: `Please enter valid password. Minimum ${ params.user.rules.passwordMinLength } is required.`\r\n    }\r\n  ]\r\n\r\n  // Validate\r\n  try {\r\n    validate(rules)\r\n  } catch(error) {\r\n    throw new Error(error.message)\r\n  }\r\n\r\n  // Check if user exists with same email\r\n  try {\r\n    const response = {\r\n      success: true,\r\n      message: 'You have been logged in successfully.'\r\n    }\r\n\r\n    const user = await User.findOne({ email })\r\n\r\n    if (!user) {\r\n      // User does not exists\r\n      response.success = false\r\n      response.message = `We do not have any user registered with ${ email } email address. Please signup.`\r\n    } else {\r\n      // User exists\r\n      const passwordMatch = await bcrypt.compare(password, user.password)\r\n\r\n      if (!passwordMatch) {\r\n        // Incorrect password\r\n        response.success = false\r\n        response.message = `Sorry, the password you entered is incorrect. Please try again.`\r\n      } else {\r\n        response.data = userAuthResponse(user)\r\n      }\r\n    }\r\n\r\n    return response\r\n  } catch (error) {\r\n    throw new Error(params.common.message.error.server)\r\n  }\r\n}\r\n\r\n// Get by ID\r\nexport async function user({ params: { id } }) {\r\n  // Validation rules\r\n  const rules = [\r\n    {\r\n      data: { value: id },\r\n      check: 'notEmpty',\r\n      message: params.common.message.error.invalidData\r\n    }\r\n  ]\r\n\r\n  // Validate\r\n  try {\r\n    validate(rules)\r\n  } catch(error) {\r\n    throw new Error(error.message)\r\n  }\r\n\r\n  if(authCheck(auth)) {\r\n    try {\r\n      const data = await User.findOne({ _id: id })\r\n\r\n      return {\r\n        data\r\n      }\r\n    } catch(error) {\r\n      throw new Error(params.common.message.error.server)\r\n    }\r\n  }\r\n\r\n  throw new Error(params.user.message.error.auth)\r\n}\r\n\r\n// Get by organization\r\nexport async function usersByOrganization({ fields, auth }) {\r\n  if(authCheck(auth)) {\r\n    try {\r\n      const data = await User\r\n        .find({ organizationId: auth.user.organizationId })\r\n        .select(fields)\r\n\r\n      return {\r\n        data\r\n      }\r\n    } catch(error) {\r\n      throw new Error(params.common.message.error.server)\r\n    }\r\n  }\r\n\r\n  throw new Error(params.user.message.error.auth)\r\n}\r\n\r\n// Auth Response (token and user info)\r\nexport function userAuthResponse({ _id, organizationId, name, email, role, demo }) {\r\n  return {\r\n    token: jwt.sign({ id: _id }, SECURITY_SECRET),\r\n    user: { _id, organizationId, name, email, role, demo }\r\n  }\r\n}\r\n"],"file":"query.js"}