{"version":3,"sources":["../../../src/modules/user/mutation.js"],"names":["userStartNow","auth","Error","Organization","create","name","organization","DemoUser","demoUser","bcrypt","hash","_id","Math","random","SECURITY_SALT_ROUNDS","passwordHashed","User","organizationId","email","params","site","domain","password","admin","demo","user","Activity","userId","action","activity","types","message","data","userVerifySendCode","rules","value","check","findOne","Verification","verified","type","verification","signup","code","to","from","emails","help","subject","template","common","error","server","userVerifyCode","updateOne","userVerifyUpdateAccount","organizationName","length","passwordMinLength","userCheck","organizationDomain","split","$set","userAcceptInvite","id","Invite","accepted","invite","inviteId","userUpdate","userResetPasswordSendCode","userResetPasswordVerifyCode","userResetPasswordUpdate","findOneAndUpdate","userUpdated"],"mappings":"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","sourcesContent":["// Imports\r\nimport bcrypt from 'bcrypt'\r\nimport React from 'react'\r\n\r\n// App Imports\r\nimport { SECURITY_SALT_ROUNDS } from '../../setup/config/env'\r\nimport params from '../../setup/config/params'\r\nimport validate from '../../setup/helpers/validation'\r\nimport { authCheck, randomNumber } from '../../setup/helpers/utils'\r\nimport User from './model'\r\nimport { userAuthResponse } from './query'\r\n\r\n// Email\r\nimport { send as sendEmail } from '../email/send'\r\nimport Organization from '../organization/model'\r\nimport DemoUser from '../demo-user/model'\r\nimport Activity from '../activity/model'\r\nimport Verification from '../verification/model'\r\nimport Verify from './email/Verify'\r\nimport AccountCreatedOrVerified from './email/AccountCreatedOrVerified'\r\nimport Invite from '../invite/model'\r\n\r\n// Create a demo user and login\r\nexport async function userStartNow({ auth }) {\r\n  // Check if user is already logged in\r\n  if(authCheck(auth)) {\r\n    throw new Error(`You are already logged in. Please go to your dashboard to continue.`)\r\n  } else {\r\n    try {\r\n      // Create new Organization\r\n      const organization = await Organization.create({\r\n        name: 'Demo Organization'\r\n      })\r\n\r\n      // Create a new demo user\r\n      const demoUser = await DemoUser.create({})\r\n\r\n      // User does not exists\r\n      const passwordHashed = await bcrypt.hash(demoUser._id + Math.random(), SECURITY_SALT_ROUNDS)\r\n\r\n      const user = await User.create({\r\n        organizationId: organization._id,\r\n        name: 'Demo User',\r\n        email: `demo.user+${ demoUser._id }@${ params.site.domain }`,\r\n        password: passwordHashed,\r\n        admin: true,\r\n        demo: true\r\n      })\r\n\r\n      // Log activity - Organization Created\r\n      if(user) {\r\n        await Activity.create({\r\n          organizationId: organization._id,\r\n          userId: user._id,\r\n          action: params.activity.types.create,\r\n          message: `Your organization was created.`\r\n        })\r\n      }\r\n\r\n      return {\r\n        data: userAuthResponse(user),\r\n        message: 'You have been logged in successfully.'\r\n      }\r\n    } catch(error) {\r\n      throw new Error(`There was some error. Please try again.`)\r\n    }\r\n  }\r\n}\r\n\r\n// Verify email send code\r\nexport async function userVerifySendCode({ params: { email }, auth }) {\r\n  // Validation rules\r\n  const rules = [\r\n    {\r\n      data: { value: email },\r\n      check: 'email',\r\n      message: 'Please enter valid email.'\r\n    }\r\n  ]\r\n\r\n  // Validate\r\n  try {\r\n    validate(rules)\r\n  } catch(error) {\r\n    throw new Error(error.message)\r\n  }\r\n\r\n  try {\r\n    const user = await User.findOne({ email })\r\n\r\n    if(user) {\r\n      // User already exists\r\n      throw new Error(`The email ${ email } is already registered. Please try to login.`)\r\n    } else {\r\n      let code\r\n\r\n      if(authCheck(auth) && auth.user.demo) {\r\n        const verification = await Verification.findOne({ userId: auth.user._id, email, verified: false, type: params.user.verification.signup })\r\n\r\n        if(verification) {\r\n          code = verification.code\r\n        }\r\n      }\r\n\r\n      if(!code) {\r\n        code = randomNumber(1000, 9999)\r\n\r\n        await Verification.create({\r\n          email,\r\n          code,\r\n          verified: false,\r\n          type: params.user.verification.signup\r\n        })\r\n      }\r\n\r\n      await sendEmail({\r\n        to: {\r\n          email: email\r\n        },\r\n        from: {\r\n          name: params.site.emails.help.name,\r\n          email: params.site.emails.help.email\r\n        },\r\n        subject: `Verification Code: ${ code }`,\r\n        template:\r\n          <Verify\r\n            code={code}\r\n          />\r\n      })\r\n\r\n      return {\r\n        data: true\r\n      }\r\n    }\r\n  } catch(error) {\r\n    throw new Error(params.common.message.error.server)\r\n  }\r\n}\r\n\r\n// Verify email send code\r\nexport async function userVerifyCode({ params: { email, code } }) {\r\n  // Validation rules\r\n  const rules = [\r\n    {\r\n      data: { value: email },\r\n      check: 'email',\r\n      message: 'Please enter valid email.'\r\n    },\r\n    {\r\n      data: { value: code },\r\n      check: 'notEmpty',\r\n      message: 'Please enter valid code.'\r\n    }\r\n  ]\r\n\r\n  // Validate\r\n  try {\r\n    validate(rules)\r\n  } catch(error) {\r\n    throw new Error(error.message)\r\n  }\r\n\r\n  try {\r\n    const verification = await Verification.findOne({ email, code, verified: false, type: params.user.verification.signup })\r\n\r\n    if(verification) {\r\n      // Mark as verified\r\n      await Verification.updateOne(\r\n        {_id: verification._id},\r\n        { verified: true }\r\n      )\r\n\r\n      return {\r\n        data: true\r\n      }\r\n    } else {\r\n      throw new Error('The code you entered is invalid. Please try again with valid code.')\r\n    }\r\n  } catch(error) {\r\n    throw new Error(params.common.message.error.server)\r\n  }\r\n}\r\n\r\n// Verify create/update user account\r\nexport async function userVerifyUpdateAccount({ params: { email, name, password, organizationName }, auth }) {\r\n  // Validation rules\r\n  const rules = [\r\n    {\r\n      data: { value: email },\r\n      check: 'email',\r\n      message: 'Please enter valid email.'\r\n    },\r\n    {\r\n      data: { value: name },\r\n      check: 'notEmpty',\r\n      message: 'Please enter valid name.'\r\n    },\r\n    {\r\n      data: { value: password, length: params.user.rules.passwordMinLength },\r\n      check: 'lengthMin',\r\n      message: `Please enter valid password. Minimum ${ params.user.rules.passwordMinLength } is required.`\r\n    },\r\n    {\r\n      data: { value: organizationName },\r\n      check: 'notEmpty',\r\n      message: 'Please enter valid organization name.'\r\n    }\r\n  ]\r\n\r\n  // Validate\r\n  try {\r\n    validate(rules)\r\n  } catch(error) {\r\n    throw new Error(error.message)\r\n  }\r\n\r\n  try {\r\n    const verification = await Verification.findOne({ email, verified: true, type: params.user.verification.signup })\r\n\r\n    const userCheck = await User.findOne({ email: verification.email })\r\n\r\n    if(!userCheck) {\r\n      if (verification && verification.verified) {\r\n        let user\r\n        let message\r\n\r\n        const passwordHashed = await bcrypt.hash(password, SECURITY_SALT_ROUNDS)\r\n        const organizationDomain = email.split('@')[1]\r\n\r\n        if(auth.user && auth.user._id && auth.user.demo) {\r\n          // Update user\r\n          await User.updateOne(\r\n            { _id: auth.user._id },\r\n            {\r\n              $set: {\r\n                email: verification.email,\r\n                password: passwordHashed,\r\n                name,\r\n                demo: false\r\n              }\r\n            }\r\n          )\r\n\r\n          // Update organization name\r\n          await Organization.updateOne(\r\n            { _id: auth.user.organizationId },\r\n            {\r\n              $set: {\r\n                name: organizationName,\r\n                domain: organizationDomain\r\n              }\r\n            }\r\n          )\r\n\r\n          // Log activity - User joined organization\r\n          await Activity.create({\r\n            organizationId: auth.user.organizationId,\r\n            userId: auth.user._id,\r\n            action: params.activity.types.create,\r\n            message: `${ name } (${ email }) joined the organization.`\r\n          })\r\n\r\n          user = await User.findOne({ _id: auth.user._id })\r\n\r\n          message = 'Your account has been verified and updated successfully.'\r\n        } else {\r\n          // Create new user\r\n          const organization = await Organization.create({\r\n            name: organizationName,\r\n            domain: organizationDomain\r\n          })\r\n\r\n          // Create user\r\n          user = await User.create({\r\n            organizationId: organization._id,\r\n            name,\r\n            email: verification.email,\r\n            password: passwordHashed,\r\n            admin: true,\r\n            demo: false\r\n          })\r\n\r\n          message = 'Your account has been created successfully.'\r\n        }\r\n\r\n        await sendEmail({\r\n          to: {\r\n            name,\r\n            email: email\r\n          },\r\n          from: {\r\n            name: params.site.emails.help.name,\r\n            email: params.site.emails.help.email\r\n          },\r\n          subject: message,\r\n          template:\r\n            <AccountCreatedOrVerified\r\n              to={name}\r\n              message={message}\r\n            />\r\n        })\r\n\r\n        return {\r\n          data: userAuthResponse(user),\r\n          message: message\r\n        }\r\n      } else {\r\n        throw new Error('The code you entered is invalid. Please try again with valid code.')\r\n      }\r\n    } else {\r\n      throw new Error(`The email ${ verification.email } is already registered. Please try to login.`)\r\n    }\r\n  } catch(error) {\r\n    throw new Error(params.common.message.error.server)\r\n  }\r\n}\r\n\r\n// Accept invitation\r\nexport async function userAcceptInvite({ params: { id, name, password } }) {\r\n  // Validation rules\r\n  const rules = [\r\n    {\r\n      data: { value: id },\r\n      check: 'notEmpty',\r\n      message: 'Please enter valid email.'\r\n    },\r\n    {\r\n      data: { value: name },\r\n      check: 'notEmpty',\r\n      message: 'Please enter valid name.'\r\n    },\r\n    {\r\n      data: { value: password, length: params.user.rules.passwordMinLength },\r\n      check: 'lengthMin',\r\n      message: `Please enter valid password. Minimum ${ params.user.rules.passwordMinLength } is required.`\r\n    }\r\n  ]\r\n\r\n  // Validate\r\n  try {\r\n    validate(rules)\r\n  } catch(error) {\r\n    throw new Error(error.message)\r\n  }\r\n\r\n  try {\r\n    // Users exists with same email check\r\n    const invite = await Invite.findOne({ _id: id, accepted: false })\r\n\r\n    if (invite) {\r\n      const passwordHashed = await bcrypt.hash(password, SECURITY_SALT_ROUNDS)\r\n\r\n      // Create user\r\n      const user = await User.create({\r\n        organizationId: invite.organizationId,\r\n        name,\r\n        email: invite.email,\r\n        password: passwordHashed,\r\n        admin: false,\r\n        demo: false\r\n      })\r\n\r\n      // Set invitation accepted\r\n      await Invite.updateOne(\r\n        { _id: invite._id },\r\n        {\r\n          $set: {\r\n            accepted: true\r\n          }\r\n        }\r\n      )\r\n\r\n      // Send email\r\n      const subject = 'Your account has been created successfully.'\r\n\r\n      await sendEmail({\r\n        to: {\r\n          name,\r\n          email: invite.email\r\n        },\r\n        from: {\r\n          name: params.site.emails.help.name,\r\n          email: params.site.emails.help.email\r\n        },\r\n        subject,\r\n        template:\r\n          <AccountCreatedOrVerified\r\n            to={name}\r\n            message={subject}\r\n          />\r\n      })\r\n\r\n      // Log activity\r\n      if(invite) {\r\n        await Activity.create({\r\n          organizationId: invite.organizationId,\r\n          userId: user._id,\r\n          inviteId: invite._id,\r\n          action: params.activity.types.create,\r\n          message: `${ name } (${ invite.email }) joined the organization.`\r\n        })\r\n      }\r\n\r\n      return {\r\n        data: userAuthResponse(user),\r\n        message: `Invitation accepted successfully. Welcome ${ name }!`\r\n      }\r\n    } else {\r\n      // User exists\r\n      throw new Error(`Sorry, this invitation is not valid anymore.`)\r\n    }\r\n  } catch(error) {\r\n    throw new Error(params.common.message.error.server)\r\n  }\r\n}\r\n\r\n// Update\r\nexport async function userUpdate({ params: { name }, auth }) {\r\n  if(authCheck(auth)) {\r\n    // Validation rules\r\n    const rules = [\r\n      {\r\n        data: { value: name },\r\n        check: 'notEmpty',\r\n        message: 'Please enter valid name.'\r\n      }\r\n    ]\r\n\r\n    // Validate\r\n    try {\r\n      validate(rules)\r\n    } catch(error) {\r\n      throw new Error(error.message)\r\n    }\r\n\r\n    try {\r\n      await User.updateOne({ _id: auth.user._id }, { name })\r\n\r\n      const user = await User.findOne({ _id: auth.user._id })\r\n\r\n      return {\r\n        data: userAuthResponse(user),\r\n        message: 'Your profile has been updated successfully.'\r\n      }\r\n    } catch(error) {\r\n      throw new Error(params.common.message.error.server)\r\n    }\r\n  }\r\n\r\n  throw new Error('Please login to update profile.')\r\n}\r\n\r\n// Reset password send code\r\nexport async function userResetPasswordSendCode({ params: { email } }) {\r\n  // Validation rules\r\n  const rules = [\r\n    {\r\n      data: { value: email },\r\n      check: 'email',\r\n      message: 'Please enter valid email.'\r\n    }\r\n  ]\r\n\r\n  // Validate\r\n  try {\r\n    validate(rules)\r\n  } catch(error) {\r\n    throw new Error(error.message)\r\n  }\r\n\r\n  try {\r\n    const user = await User.findOne({ email })\r\n\r\n    if(user) {\r\n      let code\r\n\r\n      const verification = await Verification.findOne({ email, verified: false, type: params.user.verification.password })\r\n\r\n      if(verification) {\r\n        code = verification.code\r\n      }\r\n\r\n      if(!code) {\r\n        code = randomNumber(1000, 9999)\r\n\r\n        Verification.create({\r\n          userId: user._id,\r\n          email,\r\n          code,\r\n          verified: false,\r\n          type: params.user.verification.password\r\n        })\r\n      }\r\n\r\n      await sendEmail({\r\n        to: {\r\n          email: email\r\n        },\r\n        from: {\r\n          name: params.site.emails.help.name,\r\n          email: params.site.emails.help.email\r\n        },\r\n        subject: `Verification Code: ${ code }`,\r\n        template:\r\n          <Verify\r\n            code={code}\r\n          />\r\n      })\r\n\r\n      return {\r\n        data: true\r\n      }\r\n    } else {\r\n      throw new Error(`The email ${ email } is not registered. Please signup.`)\r\n    }\r\n  } catch(error) {\r\n    throw new Error(params.common.message.error.server)\r\n  }\r\n}\r\n\r\n// Verify email send code\r\nexport async function userResetPasswordVerifyCode({ params: { email, code } }) {\r\n  // Validation rules\r\n  const rules = [\r\n    {\r\n      data: { value: email },\r\n      check: 'email',\r\n      message: 'Please enter valid email.'\r\n    },\r\n    {\r\n      data: { value: code },\r\n      check: 'notEmpty',\r\n      message: 'Please enter valid code.'\r\n    }\r\n  ]\r\n\r\n  // Validate\r\n  try {\r\n    validate(rules)\r\n  } catch(error) {\r\n    throw new Error(error.message)\r\n  }\r\n\r\n  try {\r\n    const verification = await Verification.findOne({ email, code, verified: false, type: params.user.verification.password })\r\n\r\n    if(verification) {\r\n      // Mark as verified\r\n      await Verification.updateOne(\r\n        {_id: verification._id},\r\n        { verified: true }\r\n      )\r\n\r\n      return {\r\n        data: true\r\n      }\r\n    } else {\r\n      throw new Error('The code you entered is invalid. Please try again with valid code.')\r\n    }\r\n  } catch(error) {\r\n    throw new Error(params.common.message.error.server)\r\n  }\r\n}\r\n\r\n// Reset password update\r\nexport async function userResetPasswordUpdate({ params: { email, password } }) {\r\n  // Validation rules\r\n  const rules = [\r\n    {\r\n      data: { value: email },\r\n      check: 'email',\r\n      message: 'Please enter valid email.'\r\n    },\r\n    {\r\n      data: { value: password, length: params.user.rules.passwordMinLength },\r\n      check: 'lengthMin',\r\n      message: `Please enter valid password. Minimum ${ params.user.rules.passwordMinLength } is required.`\r\n    }\r\n  ]\r\n\r\n  // Validate\r\n  try {\r\n    validate(rules)\r\n  } catch(error) {\r\n    throw new Error(error.message)\r\n  }\r\n\r\n  try {\r\n    const verification = await Verification.findOne({ email, verified: true, type: params.user.verification.password })\r\n\r\n    const user = await User.findOne({ email: verification.email })\r\n\r\n    if(user) {\r\n      if (verification && verification.verified) {\r\n        const passwordHashed = await bcrypt.hash(password, SECURITY_SALT_ROUNDS)\r\n\r\n        // Update user\r\n        const userUpdated = await User.findOneAndUpdate(\r\n          { _id: user.id },\r\n          { password: passwordHashed },\r\n          { new: true }\r\n        )\r\n\r\n        return {\r\n          data: userAuthResponse(userUpdated),\r\n          message: 'Your password has been reset successfully.'\r\n        }\r\n      } else {\r\n        throw new Error('The code you entered is invalid. Please try again with valid code.')\r\n      }\r\n    } else {\r\n      throw new Error(`The email ${ email } is not registered. Please signup.`)\r\n    }\r\n  } catch(error) {\r\n    throw new Error(params.common.message.error.server)\r\n  }\r\n}\r\n"],"file":"mutation.js"}