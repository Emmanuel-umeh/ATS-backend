{"version":3,"sources":["../../../src/setup/server/upload.js"],"names":["server","console","info","storage","multer","diskStorage","destination","path","join","__dirname","params","candidate","resume","filename","request","file","callback","Date","now","extname","originalname","upload","single","post","response","error","json","success","get","errorMessage","Candidate","findOne","_id","candidateId","filePath","fileCheck","fs","existsSync","fileName","name","download","send"],"mappings":";;;;;;;;;;;;;AACA;;AACA;;AACA;;AAGA;;AACA;;AACA;;AARA;AAKA;AAKA;AACe,kBAAUA,MAAV,EAAkB;AAC/BC,EAAAA,OAAO,CAACC,IAAR,CAAa,kBAAb,EAD+B,CAG/B;;AACA,MAAMC,OAAO,GAAGC,mBAAOC,WAAP,CAAmB;AACjCC,IAAAA,WAAW,EAAEC,iBAAKC,IAAL,CAAUC,SAAV,EAAqB,IAArB,EAA2B,IAA3B,EAAiC,IAAjC,EAAuCC,mBAAOC,SAAP,CAAiBC,MAAjB,CAAwBL,IAA/D,CADoB;AAGjCM,IAAAA,QAAQ,EAAE,kBAAUC,OAAV,EAAmBC,IAAnB,EAAyBC,QAAzB,EAAmC;AAC3CA,MAAAA,QAAQ,CAAC,IAAD,EAAOC,IAAI,CAACC,GAAL,KAAaX,iBAAKY,OAAL,CAAaJ,IAAI,CAACK,YAAlB,CAApB,CAAR;AACD;AALgC,GAAnB,CAAhB;;AAQA,MAAMC,MAAM,GAAG,wBAAO;AACpBlB,IAAAA,OAAO,EAAEA;AADW,GAAP,EAEZmB,MAFY,CAEL,MAFK,CAAf,CAZ+B,CAgB/B;;AACAtB,EAAAA,MAAM,CAACuB,IAAP,YAAuB,UAACT,OAAD,EAAUU,QAAV,EAAuB;AAC5CH,IAAAA,MAAM,CAACP,OAAD,EAAUU,QAAV,EAAoB,UAAUC,KAAV,EAAiB;AACzC,UAAI,CAACA,KAAL,EAAY;AACVD,QAAAA,QAAQ,CAACE,IAAT,CAAc;AACZC,UAAAA,OAAO,EAAE,IADG;AAEZZ,UAAAA,IAAI,EAAED,OAAO,CAACC,IAAR,CAAaF;AAFP,SAAd;AAID,OALD,MAKO;AACLW,QAAAA,QAAQ,CAACE,IAAT,CAAc;AACZC,UAAAA,OAAO,EAAE,KADG;AAEZZ,UAAAA,IAAI,EAAE;AAFM,SAAd;AAID;AACF,KAZK,CAAN;AAaD,GAdD,EAjB+B,CAiC/B;;AACAf,EAAAA,MAAM,CAAC4B,GAAP,CAAW,wBAAX;AAAA,6FAAqC,iBAAgBd,OAAhB,EAAyBU,QAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAC7BK,cAAAA,YAD6B,GACd,6DADc;AAAA;AAAA,qBAEXC,kBAAUC,OAAV,CAAkB;AAAEC,gBAAAA,GAAG,EAAElB,OAAO,CAACJ,MAAR,CAAeuB;AAAtB,eAAlB,CAFW;;AAAA;AAE7BtB,cAAAA,SAF6B;;AAInC,kBAAGA,SAAH,EAAc;AACNuB,gBAAAA,QADM,GACK3B,iBAAKC,IAAL,CAAUC,SAAV,EAAqB,IAArB,EAA2B,IAA3B,EAAiC,IAAjC,EAAuCC,mBAAOC,SAAP,CAAiBC,MAAjB,CAAwBL,IAA/D,EAAqEI,SAAS,CAACC,MAA/E,CADL;;AAGZ,oBAAI;AACIuB,kBAAAA,SADJ,GACgBC,eAAGC,UAAH,CAAcH,QAAd,CADhB;;AAGF,sBAAGC,SAAH,EAAc;AACNG,oBAAAA,QADM,GACK,iBAAK3B,SAAS,CAAC4B,IAAf,IAAuBhC,iBAAKY,OAAL,CAAaR,SAAS,CAACC,MAAvB,CAD5B;AAGZY,oBAAAA,QAAQ,CAACgB,QAAT,CAAkBN,QAAlB,EAA4BI,QAA5B;AACD,mBAJD,MAIO;AACLd,oBAAAA,QAAQ,CAACiB,IAAT,CAAcZ,YAAd;AACD;AACF,iBAVD,CAUE,OAAMJ,KAAN,EAAa;AACbD,kBAAAA,QAAQ,CAACiB,IAAT,CAAcZ,YAAd;AACD;AACF,eAhBD,MAgBO;AACLL,gBAAAA,QAAQ,CAACiB,IAAT,CAAcZ,YAAd;AACD;;AAtBkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAArC;;AAAA;AAAA;AAAA;AAAA;AAyBD","sourcesContent":["// Imports\r\nimport path from 'path'\r\nimport multer from 'multer'\r\nimport fs from 'fs'\r\n\r\n// App Imports\r\nimport params from '../config/params.json'\r\nimport { slug } from '../helpers/utils'\r\nimport Candidate from '../../modules/candidate/model'\r\n\r\n// File upload configurations and route\r\nexport default function (server) {\r\n  console.info('SETUP - Upload..')\r\n\r\n  // Set destination\r\n  const storage = multer.diskStorage({\r\n    destination: path.join(__dirname, '..', '..', '..', params.candidate.resume.path),\r\n\r\n    filename: function (request, file, callback) {\r\n      callback(null, Date.now() + path.extname(file.originalname))\r\n    }\r\n  })\r\n\r\n  const upload = multer({\r\n    storage: storage\r\n  }).single('file')\r\n\r\n  // Upload route\r\n  server.post(`/upload`, (request, response) => {\r\n    upload(request, response, function (error) {\r\n      if (!error) {\r\n        response.json({\r\n          success: true,\r\n          file: request.file.filename\r\n        })\r\n      } else {\r\n        response.json({\r\n          success: false,\r\n          file: null\r\n        })\r\n      }\r\n    })\r\n  })\r\n\r\n  // Download route\r\n  server.get('/download/:candidateId', async function (request, response) {\r\n    const errorMessage = 'Sorry, the file you are trying to download does not exists.'\r\n    const candidate = await Candidate.findOne({ _id: request.params.candidateId })\r\n\r\n    if(candidate) {\r\n      const filePath = path.join(__dirname, '..', '..', '..', params.candidate.resume.path, candidate.resume)\r\n\r\n      try {\r\n        const fileCheck = fs.existsSync(filePath)\r\n\r\n        if(fileCheck) {\r\n          const fileName = slug(candidate.name) + path.extname(candidate.resume)\r\n\r\n          response.download(filePath, fileName)\r\n        } else {\r\n          response.send(errorMessage)\r\n        }\r\n      } catch(error) {\r\n        response.send(errorMessage)\r\n      }\r\n    } else {\r\n      response.send(errorMessage)\r\n    }\r\n  })\r\n\r\n}\r\n"],"file":"upload.js"}